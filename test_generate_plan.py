#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã MCP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ GeneratePlanUseCase.
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∞.
"""

import os
import sys
from agent.tools.generate_plan import GeneratePlanUseCase, RunnerProfile, RecentRun

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GeneratePlanUseCase.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ OpenAI API
    if not os.environ.get("OPENAI_API_KEY"):
        print("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á API –∫–æ–º–∞–Ω–¥–æ–π: export OPENAI_API_KEY='–≤–∞—à-–∫–ª—é—á'")
        sys.exit(1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä GeneratePlanUseCase
        generate_plan_tool = GeneratePlanUseCase()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
        profile = RunnerProfile(
            age=30,
            gender="–ñ–µ–Ω—Å–∫–∏–π",
            weight=62.0,
            height=165.0,
            level="beginner",
            weekly_distance=15.0,
            goal_distance="10 –∫–º",
            goal_date="2025-07-20",
            available_days=["–í—Ç–æ—Ä–Ω–∏–∫", "–ß–µ—Ç–≤–µ—Ä–≥", "–°—É–±–±–æ—Ç–∞"],
            recent_runs=[
                RecentRun(date="2025-05-01", distance=5.0, pace="6:30"),
                RecentRun(date="2025-05-08", distance=6.0, pace="6:25")
            ]
        )
        
        print(f"üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –±–µ–≥—É–Ω–∞:")
        print(f"   –í–æ–∑—Ä–∞—Å—Ç: {profile.age} –ª–µ—Ç")
        print(f"   –ü–æ–ª: {profile.gender}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {profile.level}")
        print(f"   –¶–µ–ª—å: {profile.goal_distance} ({profile.goal_date})")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: {', '.join(profile.available_days)}")
        print("\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥...\n")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan = generate_plan_tool(profile)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(plan)
        
        print("\n‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())