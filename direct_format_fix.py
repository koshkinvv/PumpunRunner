#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –∏ –ø—Ä—è–º–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫–æ–¥ –≤ bot.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
"""

import os
import sys
import logging
import asyncio
from telegram.ext import ApplicationBuilder

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from config import TELEGRAM_TOKEN
import bot

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä—è–º–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
def monkey_patch_bot():
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–æ–¥—É–ª—å bot.
    """
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    def format_training_day(day, training_day_num):
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
        """
        try:
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            title = f"*–î–µ–Ω—å {training_day_num}: {day.get('day', '')} ({day.get('date', '')})*"
            workout_type = f"*{day.get('training_type', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞').upper()}*"
            distance = day.get('distance', '')
            pace = day.get('pace', '')
            description = day.get('description', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –≤–∏–¥–µ
            message = (
                f"{title}\n"
                f"{workout_type} - {distance}\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–µ–º–ø: {pace}\n\n"
                f"*–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n"
                f"üî∑ *–†–∞–∑–º–∏–Ω–∫–∞:*\n‚Ä¢ 10-15 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –±–µ–≥–∞\n‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞\n\n"
                f"üî∂ *–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:*\n‚Ä¢ {description}\n\n"
                f"üîπ *–ó–∞–º–∏–Ω–∫–∞:*\n‚Ä¢ 5-10 –º–∏–Ω—É—Ç –ª–µ–≥–∫–æ–≥–æ –±–µ–≥–∞\n‚Ä¢ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Ç—è–∂–∫–∞\n\n"
                f"*–í–∞–∂–Ω–æ:* –ü—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É —Ç–µ–ª—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–º–ø."
            )
            
            return message
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç
            return (
                f"*–î–µ–Ω—å {training_day_num}: {day.get('day', '')} ({day.get('date', '')})*\n"
                f"–¢–∏–ø: {day.get('training_type', '')}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day.get('distance', '')}\n"
                f"–¢–µ–º–ø: {day.get('pace', '')}\n\n"
                f"{day.get('description', '')}"
            )
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞—à–µ —É–ª—É—á—à–µ–Ω–Ω–æ–µ
    bot_module = sys.modules['bot']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ—É–Ω–∫—Ü–∏—è format_training_day
    if not hasattr(bot_module, 'format_training_day'):
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
        bot_module.format_training_day = format_training_day
        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
    else:
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —É–∂–µ –µ—Å—Ç—å, –∑–∞–º–µ–Ω—è–µ–º –µ—ë
        setattr(bot_module, 'format_training_day', format_training_day)
        logger.info("–ó–∞–º–µ–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    
    # –ü–∞—Ç—á–∏–º –∫–æ–¥ –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö pending_trainings_command –∏ callback_query_handler
    if hasattr(bot_module, 'pending_trainings_command'):
        original_pending = bot_module.pending_trainings_command
        
        async def patched_pending_command(update, context):
            """–ü–∞—Ç—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã pending_trainings_command —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
            return await original_pending(update, context)
        
        bot_module.pending_trainings_command = patched_pending_command
        logger.info("–ó–∞–º–µ–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è pending_trainings_command")
    
    logger.info("–ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        monkey_patch_bot()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ setup_bot
        application = bot.setup_bot()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)