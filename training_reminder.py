"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
"""

import logging
import os
import sys
import asyncio
import pytz
from datetime import datetime, timedelta
from telegram import Bot
from telegram.error import TelegramError

from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from config import TELEGRAM_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (20:00 –ø–æ –ú–°–ö)
REMINDER_HOUR = 20
REMINDER_MINUTE = 0

async def get_next_day_trainings():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
    
    Returns:
        List of tuples: [(telegram_id, plan_id, training_day)]
    """
    logging.info("–ò—â–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ –ú–°–ö
        today = datetime.now(MOSCOW_TZ).date()
        tomorrow = today + timedelta(days=1)
        tomorrow_str = tomorrow.strftime("%d.%m.%Y")
        
        logging.info(f"–ò—â–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –¥–∞—Ç—É: {tomorrow_str}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        all_users = []
        try:
            all_users = DBManager.get_all_users_with_plans()
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞–Ω–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞–Ω–∞–º–∏: {e}")
            return []
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã - —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π: (telegram_id, plan_id, training_day)
        results = []
        
        for user in all_users:
            try:
                user_id = user['id']
                telegram_id = user['telegram_id']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                latest_plan = TrainingPlanManager.get_latest_training_plan(user_id)
                if not latest_plan:
                    logging.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
                    continue
                
                plan_id = latest_plan['id']
                training_days = latest_plan['plan_data'].get('training_days', [])
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                completed = TrainingPlanManager.get_completed_trainings(user_id, plan_id)
                canceled = TrainingPlanManager.get_canceled_trainings(user_id, plan_id)
                processed_days = completed + canceled
                
                # –ò—â–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                for idx, day in enumerate(training_days):
                    day_num = idx + 1
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏
                    if day_num in processed_days:
                        continue
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π
                    if day.get('date') == tomorrow_str:
                        logging.info(f"–ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: –î–µ–Ω—å {day_num}, {day.get('training_type')}")
                        results.append((telegram_id, plan_id, day))
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'Unknown')}: {e}")
        
        logging.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        return results
    
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e}")
        return []

async def send_training_reminder(telegram_id, training_day):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        training_day: –î–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø–ª–∞–Ω–∞
    """
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_text = (
            f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∑–∞–≤—Ç—Ä–∞!*\n\n"
            f"–ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n"
            f"*{training_day['day']} ({training_day['date']})*\n"
            f"–¢–∏–ø: {training_day['training_type']}\n"
            f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {training_day['distance']}\n"
            f"–¢–µ–º–ø: {training_day['pace']}\n\n"
            f"{training_day['description']}\n\n"
            f"–£–¥–∞—á–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üí™"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=telegram_id,
            text=reminder_text,
            parse_mode='Markdown'
        )
        logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
        return True
    
    except TelegramError as te:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {te}")
        return False
    
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
        return False

async def send_reminders():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
    """
    logging.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        trainings = await get_next_day_trainings()
        
        if not trainings:
            logging.info("–ù–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –∑–∞–≤—Ç—Ä–∞, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
            return
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        successful = 0
        failed = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for telegram_id, plan_id, training_day in trainings:
            result = await send_training_reminder(telegram_id, training_day)
            if result:
                successful += 1
            else:
                failed += 1
        
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–∫–∏: {failed}")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def schedule_reminders():
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –ø–æ –ú–°–ö.
    """
    while True:
        try:
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö
            now = datetime.now(MOSCOW_TZ)
            logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%Y-%m-%d %H:%M:%S %Z')}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            next_run = now.replace(hour=REMINDER_HOUR, minute=REMINDER_MINUTE, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–∂–µ –ø–æ—Å–ª–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now >= next_run:
                next_run = next_run + timedelta(days=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∂–¥–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            wait_seconds = (next_run - now).total_seconds()
            
            logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {next_run.strftime('%Y-%m-%d %H:%M:%S %Z')}")
            logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds:.1f} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
            # –û–∂–∏–¥–∞–µ–º –¥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(wait_seconds)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await send_reminders()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–≤–∞–∂–¥—ã
            await asyncio.sleep(60)
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            await asyncio.sleep(60)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    logging.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ DBManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–ª–∞–Ω–∞–º–∏
    if not hasattr(DBManager, 'get_all_users_with_plans'):
        logging.warning("–ú–µ—Ç–æ–¥ get_all_users_with_plans –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ DBManager. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    await schedule_reminders()

if __name__ == "__main__":
    asyncio.run(main())