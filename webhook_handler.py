"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –¥–ª—è Telegram –±–æ—Ç–∞.
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram API
–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ webhook-–º–µ—Ö–∞–Ω–∏–∑–º–∞ telegram-python-bot.
"""

import os
import json
import logging
import asyncio
import datetime
import threading
import requests
import uuid
from flask import Blueprint, request, jsonify
from config import TELEGRAM_TOKEN, logging, STATES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î –∏ –ø–ª–∞–Ω–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
try:
    from db_manager import DBManager
    from training_plan_manager import TrainingPlanManager
    from openai_service import OpenAIService
    from image_analyzer import ImageAnalyzer
    from conversation import RunnerProfileConversation
except ImportError:
    logger = logging.getLogger("webhook_handler")
    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å DBManager –∏–ª–∏ TrainingPlanManager. –ù–µ–∫–æ—Ç–æ—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("webhook_handler")

# –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
HEALTH_FILE = "bot_health.txt"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = None

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è webhook-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
webhook_bp = Blueprint("webhook_handler", __name__)

@webhook_bp.route(f"/{TELEGRAM_TOKEN}", methods=["POST"])
def webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –∑–¥–æ—Ä–æ–≤—å—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        update_health_check()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        if request.headers.get("content-type") == "application/json":
            update_data = request.get_json()
            update_id = update_data.get("update_id", "unknown")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            thread = threading.Thread(target=lambda: handle_update_in_background(bot, update_data))
            thread.daemon = True
            thread.start()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã Telegram –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ
            return jsonify({"status": "ok"})
        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π content-type: {request.headers.get('content-type')}")
            return jsonify({"status": "ok", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}), 200
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}", exc_info=True)
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK –¥–ª—è Telegram, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        return jsonify({"status": "ok", "message": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"}), 200

def handle_update_in_background(application, update_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ telegram.ext
        update_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
    """
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {json.dumps(update_data, ensure_ascii=False)[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        if 'message' in update_data:
            handle_message(application, update_data)
        elif 'callback_query' in update_data:
            handle_callback_query(application, update_data)
        else:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {e}", exc_info=True)

def handle_message(application, update_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ telegram.ext
        update_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
    """
    try:
        message = update_data['message']
        chat_id = message['chat']['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç
        if 'text' in message:
            text = message['text']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                handle_command(application, chat_id, text)
            # –ö–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            elif text == "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω":
                # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback_query –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω"
                fake_callback_query = {
                    'id': str(uuid.uuid4()),
                    'from': {'id': chat_id, 'first_name': 'User'},
                    'message': {'chat': {'id': chat_id}, 'message_id': 0},
                    'data': 'view_plan'
                }
                handle_callback_query(application, {'callback_query': fake_callback_query})
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                try:
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    user_id = DBManager.get_user_id(chat_id)
                    if not user_id:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è chat_id={chat_id}")
                        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    profile = DBManager.get_runner_profile(user_id)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                    if profile and profile.get('distance') and not profile.get('competition_date'):
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–∞—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ –¥–∞—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: {text}")
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ –¥–∞—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
                        date_value = None
                        if text.lower() == '–Ω–µ—Ç –¥–∞—Ç—ã':
                            date_value = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                        else:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì
                                day, month, year = map(int, text.split('.'))
                                date_value = text
                            except:
                                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {text}")
                                send_telegram_message(
                                    chat_id, 
                                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.06.2025) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç –¥–∞—Ç—ã'."
                                )
                                return
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
                        connection = DBManager.get_connection()
                        cursor = connection.cursor()
                        
                        try:
                            cursor.execute(
                                "UPDATE runner_profiles SET competition_date = %s WHERE user_id = %s",
                                (date_value, user_id)
                            )
                            connection.commit()
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                            send_telegram_message(
                                chat_id, 
                                f"‚úÖ –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {date_value}."
                            )
                            
                            # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å - –æ –ø–æ–ª–µ –±–µ–≥—É–Ω–∞
                            keyboard = [
                                [{"text": "–ú—É–∂—á–∏–Ω–∞", "callback_data": "set_gender_male"}],
                                [{"text": "–ñ–µ–Ω—â–∏–Ω–∞", "callback_data": "set_gender_female"}]
                            ]
                            
                            send_message_with_keyboard(
                                chat_id,
                                "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                                keyboard
                            )
                            
                        except Exception as e:
                            connection.rollback()
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: {e}")
                            send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
                        finally:
                            if cursor:
                                cursor.close()
                            if connection:
                                connection.close()
                    else:
                        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —á–∞—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è)
                        send_telegram_message(chat_id, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–≥–æ.")
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                    send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        elif 'photo' in message:
            send_telegram_message(chat_id, "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Ñ–æ—Ç–æ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ.")
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

def handle_command(application, chat_id, command_text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ telegram.ext
        chat_id: ID —á–∞—Ç–∞
        command_text: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
    """
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        parts = command_text.split(' ', 1)
        command = parts[0].lower()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if command == '/help':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = get_user_info(chat_id) 
            first_name = user_info.get('first_name', '')
            
            send_telegram_message(chat_id, 
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name if first_name else '–±–µ–≥—É–Ω'}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–≥—É–Ω–æ–≤. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
                "/start - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞\n"
                "/plan - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                "/pending - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
                "üì± –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, "
                "–∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –∑–∞—á—Ç—É –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!"
            )
        elif command == '/start':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = get_user_info(chat_id) 
            first_name = user_info.get('first_name', '')
            last_name = user_info.get('last_name', '')
            username = user_info.get('username', '')
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id={chat_id}, username={username}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: id={chat_id}")
            user_id = DBManager.add_user(chat_id, username=username, first_name=first_name, last_name=last_name)
            
            if not user_id:
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å
            profile = DBManager.get_runner_profile(user_id)
            
            if profile:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
                send_telegram_message(chat_id, 
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name if first_name else '–±–µ–≥—É–Ω'}! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /plan."
                )
            else:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_telegram_message(chat_id, 
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name if first_name else '–±–µ–≥—É–Ω'}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–≥—É–Ω–æ–≤.\n\n"
                    "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.\n"
                    "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                start_profile_creation_dialog(chat_id, user_id)
        elif command == '/plan':
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π callback_query –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω"
            fake_callback_query = {
                'id': str(uuid.uuid4()),
                'from': {'id': chat_id, 'first_name': 'User'},
                'message': {'chat': {'id': chat_id}, 'message_id': 0},
                'data': 'view_plan'
            }
            handle_callback_query(application, {'callback_query': fake_callback_query})
        elif command == '/pending':
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ chat_id
            telegram_id = chat_id
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_user_id = DBManager.get_user_id(telegram_id)
            
            if not db_user_id:
                send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            
            if not current_plan:
                send_telegram_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
                return
            
            plan_id = current_plan['id']
            plan_data = current_plan['plan_data']
            
            if not plan_data or 'training_days' not in plan_data:
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
            canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
            
            # –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            training_days = plan_data['training_days']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            has_pending = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            send_telegram_message(chat_id, "üìÖ *–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*", parse_mode="Markdown")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            for i, day in enumerate(training_days):
                day_num = i + 1
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                if day_num in completed_days or day_num in canceled_days:
                    continue
                    
                has_pending = True
                day_info = f"–î–µ–Ω—å {day_num}: {day['day']} ({day['date']})\n"
                day_info += f"–¢–∏–ø: {day['training_type']}\n"
                day_info += f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                day_info += f"–¢–µ–º–ø: {day['pace']}\n"
                day_info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {day['description']}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                complete_button = {
                    "text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                    "callback_data": f"complete_training_{plan_id}_{day_num}"
                }
                cancel_button = {
                    "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    "callback_data": f"cancel_training_{plan_id}_{day_num}"
                }
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram API
                training_keyboard = [[complete_button, cancel_button]]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                send_message_with_keyboard(chat_id, f"‚è≥ {day_info}", training_keyboard, parse_mode="Markdown")
            
            if not has_pending:
                send_telegram_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!", parse_mode="Markdown")
        else:
            send_telegram_message(chat_id, 
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ {command} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
        send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def handle_callback_query(application, update_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback query –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
    
    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ telegram.ext
        update_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
    """
    try:
        callback_query = update_data['callback_query']
        chat_id = callback_query['message']['chat']['id']
        callback_data = callback_query['data']
        callback_id = callback_query['id']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ callback
        answer_callback_query(callback_id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ callback_data
        if callback_data.startswith('set_distance_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏–∑ callback_data
                distance = int(callback_data.split('_')[-1])
                
                # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ chat_id
                telegram_id = chat_id
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db_user_id = DBManager.get_user_id(telegram_id)
                
                if not db_user_id:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                profile = DBManager.get_runner_profile(db_user_id)
                
                connection = DBManager.get_connection()
                cursor = connection.cursor()
                
                try:
                    if not profile:
                        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π
                        logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user_id} —Å –¥–∏—Å—Ç–∞–Ω—Ü–∏–µ–π {distance}")
                        cursor.execute(
                            "INSERT INTO runner_profiles (user_id, distance) VALUES (%s, %s)",
                            (db_user_id, distance)
                        )
                    else:
                        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
                        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user_id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é {distance}")
                        cursor.execute(
                            "UPDATE runner_profiles SET distance = %s WHERE user_id = %s",
                            (distance, db_user_id)
                        )
                    connection.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
                    send_telegram_message(
                        chat_id, 
                        f"‚úÖ –î–∏—Å—Ç–∞–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {distance} –∫–º."
                    )
                    
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π
                    send_telegram_message(
                        chat_id, 
                        "üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—É—é –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì).\n\n"
                        "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç –¥–∞—Ç—ã'."
                    )
                    
                except Exception as e:
                    connection.rollback()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏: {e}")
                    send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.")
                finally:
                    cursor.close()
                    connection.close()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏: {e}", exc_info=True)
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                
        elif callback_data.startswith('complete_training_') or callback_data.startswith('cancel_training_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
            try:
                parts = callback_data.split('_')
                action = parts[0]  # complete –∏–ª–∏ cancel
                plan_id = int(parts[2])
                day_num = int(parts[3])
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_id = chat_id
                db_user_id = DBManager.get_user_id(user_id)
                
                if not db_user_id:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
                if action == 'complete':
                    # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
                    success = TrainingPlanManager.mark_training_completed(db_user_id, plan_id, day_num)
                    
                    if success:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        plan = TrainingPlanManager.get_training_plan(db_user_id, plan_id)
                        
                        if plan and 'plan_data' in plan and plan['plan_data']:
                            plan_data = plan['plan_data']
                            if 'training_days' in plan_data:
                                training_days = plan_data['training_days']
                                
                                if day_num <= len(training_days):
                                    training = training_days[day_num - 1]
                                    distance = training.get('distance', '0 –∫–º')
                                    
                                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                                    try:
                                        # –£–±–∏—Ä–∞–µ–º ' –∫–º' –∏ –ø—Ä–æ–±–µ–ª—ã, –∑–∞—Ç–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                                        distance_value = float(distance.replace('–∫–º', '').strip())
                                        
                                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞
                                        DBManager.update_weekly_volume(db_user_id, distance_value)
                                    except:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏—é '{distance}' –≤ —á–∏—Å–ª–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ø–ª–∞–Ω–µ
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                            completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                            canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
                            processed_days = completed_days + canceled_days
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
                            logger.info(f"–ü–ª–∞–Ω {plan_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–Ω–∏ {completed_days}, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏ {canceled_days}")
                            
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–ª–∞–Ω–µ
                            total_days = len(plan['plan_data']['training_days'])
                            logger.info(f"–í—Å–µ–≥–æ –¥–Ω–µ–π –≤ –ø–ª–∞–Ω–µ: {total_days}")
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                            pending_days = [day for day in range(1, total_days + 1) if day not in processed_days]
                            has_pending_trainings = len(pending_days) > 0
                            logger.info(f"–û–∂–∏–¥–∞—é—â–∏–µ –¥–Ω–∏: {pending_days}, –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ: {has_pending_trainings}")
                            
                            # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if not has_pending_trainings:
                                logger.info(f"–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, –ø–ª–∞–Ω {plan_id}")
                                
                                # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                                total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
                                logger.info(f"–û–±—â–µ–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance} –∫–º")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                profile = DBManager.get_runner_profile(db_user_id)
                                weekly_volume = profile.get('weekly_volume', 0) if profile else 0
                                logger.info(f"–¢–µ–∫—É—â–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: {weekly_volume} –∫–º")
                                
                                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                try:
                                    from bot_modified import format_weekly_volume
                                    formatted_volume = format_weekly_volume(weekly_volume, str(total_distance))
                                except ImportError:
                                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å format_weekly_volume –∏–∑ bot_modified")
                                    formatted_volume = f"{weekly_volume} –∫–º"
                                
                                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                                continue_button = {
                                    "text": "üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                                    "callback_data": f"continue_plan_{plan_id}"
                                }
                                keyboard = [[continue_button]]
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                congratulation_message = (
                                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                                    f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {formatted_volume}.\n\n"
                                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?"
                                )
                                
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {congratulation_message}")
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                                try:
                                    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
                                    data = {
                                        "chat_id": chat_id,
                                        "text": congratulation_message,
                                        "reply_markup": {
                                            "inline_keyboard": keyboard
                                        }
                                    }
                                    
                                    response = requests.post(url, json=data)
                                    response_data = response.json()
                                    
                                    if response.status_code == 200 and response_data.get('ok'):
                                        logger.info(f"–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                                    else:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {response.text}")
                                except Exception as e:
                                    logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                        message_id = callback_query['message']['message_id']
                        message_text = callback_query['message']['text']
                        
                        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '‚è≥' –∏ –¥–æ–±–∞–≤–ª—è–µ–º '‚úÖ', –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ "–í–´–ü–û–õ–ù–ï–ù–û"
                        if message_text.startswith('‚è≥'):
                            training_title_end = message_text.find('\n')
                            if training_title_end > 0:
                                # –î–æ–±–∞–≤–ª—è–µ–º " - –í–´–ü–û–õ–ù–ï–ù–û" –≤ –∫–æ–Ω–µ—Ü –∑–∞–≥–æ–ª–æ–≤–∫–∞
                                title = message_text[1:training_title_end]
                                if " - –í–´–ü–û–õ–ù–ï–ù–û" not in title:
                                    title += " - –í–´–ü–û–õ–ù–ï–ù–û"
                                new_text = '‚úÖ' + title + message_text[training_title_end:]
                                message_text = new_text
                            else:
                                message_text = '‚úÖ' + message_text[1:]
                        
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                        try:
                            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText"
                            
                            data = {
                                "chat_id": chat_id,
                                "message_id": message_id,
                                "text": message_text,
                                "parse_mode": "Markdown"
                            }
                                
                            response = requests.post(url, json=data)
                            
                            if response.status_code != 200:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                                # –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                send_telegram_message(chat_id, message_text, parse_mode="Markdown")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            # –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            send_telegram_message(chat_id, message_text, parse_mode="Markdown")
                    else:
                        answer_callback_query(callback_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.", show_alert=True)
                        
                elif action == 'cancel':
                    # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
                    success = TrainingPlanManager.mark_training_canceled(db_user_id, plan_id, day_num)
                    
                    if success:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É –æ–± –æ—Ç–º–µ–Ω–µ
                        message_id = callback_query['message']['message_id']
                        message_text = callback_query['message']['text']
                        
                        # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '‚è≥' –∏ –¥–æ–±–∞–≤–ª—è–µ–º '‚ùå', –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ "–û–¢–ú–ï–ù–ï–ù–û"
                        if message_text.startswith('‚è≥'):
                            training_title_end = message_text.find('\n')
                            if training_title_end > 0:
                                # –î–æ–±–∞–≤–ª—è–µ–º " - –û–¢–ú–ï–ù–ï–ù–û" –≤ –∫–æ–Ω–µ—Ü –∑–∞–≥–æ–ª–æ–≤–∫–∞
                                title = message_text[1:training_title_end]
                                if " - –û–¢–ú–ï–ù–ï–ù–û" not in title:
                                    title += " - –û–¢–ú–ï–ù–ï–ù–û"
                                new_text = '‚ùå' + title + message_text[training_title_end:]
                                message_text = new_text
                            else:
                                message_text = '‚ùå' + message_text[1:]
                        
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
                        try:
                            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText"
                            
                            data = {
                                "chat_id": chat_id,
                                "message_id": message_id,
                                "text": message_text,
                                "parse_mode": "Markdown"
                            }
                                
                            response = requests.post(url, json=data)
                            
                            if response.status_code != 200:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
                                # –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                send_telegram_message(chat_id, message_text, parse_mode="Markdown")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                            # –ö–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            send_telegram_message(chat_id, message_text, parse_mode="Markdown")
                        
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ø–ª–∞–Ω
                        adjust_button = {
                            "text": "‚úÖ –î–∞, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                            "callback_data": f"adjust_plan_{plan_id}_{day_num}"
                        }
                        no_adjust_button = {
                            "text": "‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å",
                            "callback_data": "no_adjust"
                        }
                        keyboard = [[adjust_button], [no_adjust_button]]
                        
                        send_message_with_keyboard(
                            chat_id, 
                            "–•–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π?", 
                            keyboard
                        )
                    else:
                        answer_callback_query(callback_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.", show_alert=True)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π: {e}", exc_info=True)
                answer_callback_query(callback_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        elif callback_data == 'view_plan':
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ chat_id
            telegram_id = chat_id
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ telegram_id
                db_user_id = DBManager.get_user_id(telegram_id)
                
                if not db_user_id:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                
                if not plan:
                    send_telegram_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞
                if 'id' not in plan:
                    send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–ª–∞–Ω–∞.")
                    logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID. –ü–ª–∞–Ω: {plan}")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∏–∑ plan_data
                if 'plan_data' not in plan or not plan['plan_data']:
                    send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞.")
                    logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ. –ü–ª–∞–Ω: {plan}")
                    return
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞
                plan_data = plan['plan_data']
                if not isinstance(plan_data, dict):
                    send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
                    logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–ª–∞–Ω: {plan_data}")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–ª–∞–Ω–µ
                if 'training_days' not in plan_data or not plan_data['training_days']:
                    send_telegram_message(chat_id, "‚ùå –í–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
                    logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–ª–∞–Ω: {plan_data}")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                plan_id = plan['id']
                completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
                
                # –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                training_days = plan_data['training_days']
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                send_telegram_message(chat_id, f"üìÖ *–í–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:*", parse_mode="Markdown")
                
                # –§–ª–∞–≥ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                has_upcoming = False
                has_completed = False
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if any(day_num in completed_days or day_num in canceled_days for day_num in range(1, len(training_days) + 1)):
                    send_telegram_message(chat_id, "*–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*", parse_mode="Markdown")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                for i, day in enumerate(training_days):
                    day_num = i + 1
                    day_info = f"–î–µ–Ω—å {day_num}: {day['day']} ({day['date']})\n"
                    day_info += f"–¢–∏–ø: {day['training_type']}\n"
                    day_info += f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    day_info += f"–¢–µ–º–ø: {day['pace']}\n"
                    day_info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {day['description']}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
                    if day_num in completed_days:
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É "–í–´–ü–û–õ–ù–ï–ù–û" –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        day_info_title_end = day_info.find('\n')
                        if day_info_title_end > 0:
                            day_info = day_info[:day_info_title_end] + " - –í–´–ü–û–õ–ù–ï–ù–û" + day_info[day_info_title_end:]
                        send_telegram_message(chat_id, f"‚úÖ {day_info}", parse_mode="Markdown")
                        has_completed = True
                    elif day_num in canceled_days:
                        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É "–û–¢–ú–ï–ù–ï–ù–û" –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                        day_info_title_end = day_info.find('\n')
                        if day_info_title_end > 0:
                            day_info = day_info[:day_info_title_end] + " - –û–¢–ú–ï–ù–ï–ù–û" + day_info[day_info_title_end:]
                        send_telegram_message(chat_id, f"‚ùå {day_info}", parse_mode="Markdown")
                        has_completed = True
                    else:
                        has_upcoming = True
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–∞–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                if has_upcoming:
                    send_telegram_message(chat_id, "*–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*", parse_mode="Markdown")
                    
                    for i, day in enumerate(training_days):
                        day_num = i + 1
                        if day_num not in completed_days and day_num not in canceled_days:
                            day_info = f"–î–µ–Ω—å {day_num}: {day['day']} ({day['date']})\n"
                            day_info += f"–¢–∏–ø: {day['training_type']}\n"
                            day_info += f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                            day_info += f"–¢–µ–º–ø: {day['pace']}\n"
                            day_info += f"–û–ø–∏—Å–∞–Ω–∏–µ: {day['description']}"
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
                            complete_button = {
                                "text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                                "callback_data": f"complete_training_{plan_id}_{day_num}"
                            }
                            cancel_button = {
                                "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                                "callback_data": f"cancel_training_{plan_id}_{day_num}"
                            }
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram API
                            training_keyboard = [[complete_button, cancel_button]]
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                            send_message_with_keyboard(chat_id, f"‚è≥ {day_info}", training_keyboard, parse_mode="Markdown")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö, –Ω–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                if not has_completed and not has_upcoming:
                    send_telegram_message(chat_id, "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—É—Å—Ç.", parse_mode="Markdown")
                
                # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                keyboard = []
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
                new_plan_button = {
                    "text": "üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω",
                    "callback_data": "new_plan"
                }
                keyboard.append([new_plan_button])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                send_message_with_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}", exc_info=True)
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif callback_data == 'new_plan':
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ chat_id
            telegram_id = chat_id
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db_user_id = DBManager.get_user_id(telegram_id)
                
                if not db_user_id:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user_data = get_user_info(telegram_id)
                    db_user_id = DBManager.add_user(
                        telegram_id,
                        user_data.get('username'),
                        user_data.get('first_name'),
                        user_data.get('last_name')
                    )
                    if not db_user_id:
                        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                
                # –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞
                profile = DBManager.get_runner_profile(db_user_id)
                
                if not profile:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                    default_profile = DBManager.create_default_runner_profile(db_user_id)
                    if not default_profile:
                        send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    
                    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    send_telegram_message(
                        chat_id, 
                        "‚úÖ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –µ–≥–æ –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å (–≤ –∫–º):"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
                    keyboard = [
                        [
                            {"text": "5 –∫–º", "callback_data": "set_distance_5"}, 
                            {"text": "10 –∫–º", "callback_data": "set_distance_10"}
                        ],
                        [
                            {"text": "21 –∫–º (–ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω)", "callback_data": "set_distance_21"}, 
                            {"text": "42 –∫–º (–º–∞—Ä–∞—Ñ–æ–Ω)", "callback_data": "set_distance_42"}
                        ]
                    ]
                    
                    send_message_with_keyboard(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é:", keyboard)
                    return
                
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
                send_telegram_message(chat_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞ –∏ —Å–µ—Ä–≤–∏—Å OpenAI
                try:
                    from openai_service import OpenAIService
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAIService
                    openai_service = OpenAIService()
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                    new_plan = openai_service.generate_training_plan(profile)
                    
                    if not new_plan:
                        send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    plan_id = TrainingPlanManager.save_training_plan(db_user_id, new_plan)
                    
                    if not plan_id:
                        send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    
                    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞
                    send_telegram_message(chat_id, "‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    fake_callback_query = {
                        'id': str(uuid.uuid4()),
                        'from': {'id': chat_id, 'first_name': 'User'},
                        'message': {'chat': {'id': chat_id}, 'message_id': 0},
                        'data': 'view_plan'
                    }
                    handle_callback_query(application, {'callback_query': fake_callback_query})
                
                except ImportError as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OpenAIService: {e}", exc_info=True)
                    send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}", exc_info=True)
                    send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif callback_data == 'no_adjust':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞
            send_telegram_message(chat_id, "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        elif callback_data.startswith('continue_plan_'):
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
                plan_id = int(callback_data.split('_')[-1])
                
                # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ chat_id
                telegram_id = chat_id
                
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ telegram_id
                db_user_id = DBManager.get_user_id(telegram_id)
                
                if not db_user_id:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                profile = DBManager.get_runner_profile(db_user_id)
                if not profile:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –±–µ–≥–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                old_plan = TrainingPlanManager.get_training_plan(db_user_id, plan_id)
                if not old_plan or 'plan_data' not in old_plan:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
                send_telegram_message(chat_id, "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞ –∏ —Å–µ—Ä–≤–∏—Å OpenAI
                try:
                    from openai_service import OpenAIService
                    from bot_modified import format_training_plan_message
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAIService
                    openai_service = OpenAIService()
                    # –§—É–Ω–∫—Ü–∏—è generate_training_plan –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∫ –º–µ—Ç–æ–¥
                    generate_training_plan = openai_service.generate_training_plan
                except ImportError as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}", exc_info=True)
                    send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                plan_data = old_plan['plan_data']
                weekly_volume = profile.get('weekly_volume', 0)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                try:
                    # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
                    profile_for_plan = profile.copy()
                    profile_for_plan['weekly_volume'] = weekly_volume
                    
                    # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
                    new_plan = generate_training_plan(profile_for_plan)
                    
                    if not new_plan:
                        send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    plan_saved = TrainingPlanManager.save_training_plan(db_user_id, new_plan)
                    
                    if not plan_saved:
                        send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        return
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
                    plan_message = format_training_plan_message(new_plan)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞
                    view_plan_button = {
                        "text": "üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω",
                        "callback_data": "view_plan"
                    }
                    keyboard = [[view_plan_button]]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    send_message_with_keyboard(
                        chat_id,
                        f"‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n{plan_message}",
                        keyboard
                    )
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
                    answer_callback_query(callback_id, "‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–æ–∑–¥–∞–Ω!")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
                    send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ continue_plan: {e}", exc_info=True)
                answer_callback_query(callback_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        
        elif callback_data.startswith('adjust_plan_'):
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            try:
                # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
                parts = callback_data.split('_')
                plan_id = int(parts[2])
                canceled_day = int(parts[3])
                
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_id = chat_id
                db_user_id = DBManager.get_user_id(user_id)
                
                if not db_user_id:
                    send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
                    return
                
                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                send_telegram_message(chat_id, "üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...")
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞
                # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
                send_telegram_message(chat_id, "‚úÖ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
                fake_callback_query = {
                    'id': str(uuid.uuid4()),
                    'from': {'id': chat_id, 'first_name': 'User'},
                    'message': {'chat': {'id': chat_id}, 'message_id': 0},
                    'data': 'view_plan'
                }
                handle_callback_query(application, {'callback_query': fake_callback_query})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}", exc_info=True)
                send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        else:
            send_telegram_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query: {e}", exc_info=True)

def send_telegram_message(chat_id, text, parse_mode=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Markdown, HTML)
    """
    try:
        import requests
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        
        data = {
            "chat_id": chat_id,
            "text": text
        }
        
        if parse_mode:
            data["parse_mode"] = parse_mode
            
        response = requests.post(url, json=data)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

def answer_callback_query(callback_query_id, text=None, show_alert=False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ callback query.
    
    Args:
        callback_query_id: ID callback query
        text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        show_alert: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ alert (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    try:
        import requests
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery"
        
        data = {
            "callback_query_id": callback_query_id
        }
        
        if text:
            data["text"] = text
            
        if show_alert:
            data["show_alert"] = True
            
        response = requests.post(url, json=data)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {response.text}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query: {e}", exc_info=True)

def get_user_info(telegram_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram API.
    
    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        import requests
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getChat"
        data = {"chat_id": telegram_id}
        
        response = requests.post(url, json=data)
        
        if response.status_code == 200:
            result = response.json().get('result', {})
            return {
                'first_name': result.get('first_name', ''),
                'last_name': result.get('last_name', ''),
                'username': result.get('username', '')
            }
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {response.text}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}", exc_info=True)
        return {}

def start_profile_creation_dialog(chat_id, user_id):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ Telegram
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        keyboard = [
            [{"text": "5 –∫–º", "callback_data": "set_distance_5"}],
            [{"text": "10 –∫–º", "callback_data": "set_distance_10"}],
            [{"text": "21.1 –∫–º (–ø–æ–ª—É–º–∞—Ä–∞—Ñ–æ–Ω)", "callback_data": "set_distance_21"}],
            [{"text": "42.2 –∫–º (–º–∞—Ä–∞—Ñ–æ–Ω)", "callback_data": "set_distance_42"}]
        ]
        
        send_message_with_keyboard(
            chat_id,
            "üèÉ‚Äç‚ôÇÔ∏è –ù–∞ –∫–∞–∫—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è?",
            keyboard
        )
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –¥–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}", exc_info=True)
        send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def send_message_with_keyboard(chat_id, text, keyboard, parse_mode=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard: –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Markdown, HTML)
    """
    try:
        import requests
        import json
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        
        # –ö–Ω–æ–ø–∫–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram API, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º reply_markup
        reply_markup = {
            "inline_keyboard": keyboard
        }
        
        data = {
            "chat_id": chat_id,
            "text": text,
            "reply_markup": reply_markup  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ json.dumps
        }
        
        if parse_mode:
            data["parse_mode"] = parse_mode
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è {chat_id}: {text[:50]}...")
        logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
            
        response = requests.post(url, json=data)
        response_data = response.json()
        
        if response.status_code == 200 and response_data.get('ok'):
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: message_id={response_data.get('result', {}).get('message_id')}")
            return response_data.get('result', {}).get('message_id')
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {response.text}")
            logger.error(f"–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}", exc_info=True)

def edit_message_with_keyboard(chat_id, message_id, text, keyboard, parse_mode=None):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram, –¥–æ–±–∞–≤–ª—è—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard: –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (Markdown, HTML)
    """
    try:
        import requests
        import json
        
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/editMessageText"
        
        # –ö–Ω–æ–ø–∫–∏ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegram API, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º reply_markup
        reply_markup = {
            "inline_keyboard": keyboard
        }
        
        data = {
            "chat_id": chat_id,
            "message_id": message_id,
            "text": text,
            "reply_markup": json.dumps(reply_markup)
        }
        
        if parse_mode:
            data["parse_mode"] = parse_mode
            
        response = requests.post(url, json=data)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {response.text}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            send_message_with_keyboard(chat_id, text, keyboard, parse_mode)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {e}", exc_info=True)
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_message_with_keyboard(chat_id, text, keyboard, parse_mode)

@webhook_bp.route("/health", methods=["GET"])
def health():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        update_health_check()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
        health_info = get_bot_health()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Ç–∞
        return jsonify(health_info)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500

def get_bot_health():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞."""
    if not os.path.exists(HEALTH_FILE):
        return {
            "status": "unknown",
            "last_update": None,
            "alive": False,
            "message": "–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    
    try:
        with open(HEALTH_FILE, "r") as f:
            last_update = f.read().strip()
        
        last_time = datetime.datetime.strptime(last_update, "%Y-%m-%d %H:%M:%S")
        current_time = datetime.datetime.now()
        
        time_diff = (current_time - last_time).total_seconds()
        
        if time_diff <= 60:
            status = "healthy"
            message = "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            alive = True
        elif time_diff <= 300:
            status = "warning"
            message = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {int(time_diff // 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
            alive = True
        else:
            status = "critical"
            message = f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {int(time_diff // 60)} –º–∏–Ω"
            alive = False
        
        return {
            "status": status,
            "last_update": last_update,
            "alive": alive,
            "message": message
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return {
            "status": "error",
            "last_update": None,
            "alive": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

def update_health_check():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º."""
    try:
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(HEALTH_FILE, "w") as f:
            f.write(current_time)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

def setup_webhook(replit_domain=None):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞ Replit.
    
    Args:
        replit_domain: –î–æ–º–µ–Ω Replit (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    try:
        if not replit_domain:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω Replit –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            import os
            try:
                # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º REPLIT_DOMAINS (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
                if "REPLIT_DOMAINS" in os.environ:
                    replit_domain = os.environ.get('REPLIT_DOMAINS', '').split(',')[0]
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –¥–æ–º–µ–Ω REPLIT_DOMAINS: {replit_domain}")
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º REPLIT_DEV_DOMAIN
                elif "REPLIT_DEV_DOMAIN" in os.environ:
                    replit_domain = os.environ.get('REPLIT_DEV_DOMAIN')
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –¥–æ–º–µ–Ω REPLIT_DEV_DOMAIN: {replit_domain}")
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç REPL_SLUG.REPL_OWNER.repl.co
                elif "REPL_SLUG" in os.environ and "REPL_OWNER" in os.environ:
                    replit_domain = f"{os.environ.get('REPL_SLUG')}.{os.environ.get('REPL_OWNER')}.repl.co"
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –¥–æ–º–µ–Ω REPL_SLUG.REPL_OWNER: {replit_domain}")
                # Fallback
                else:
                    # –ü–æ–ª—É—á–∞–µ–º hostname —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    import socket
                    hostname = socket.gethostname()
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é fallback hostname: {hostname}")
                    replit_domain = hostname
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞ Replit: {e}")
                # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback –¥–æ–º–µ–Ω
                replit_domain = "workspace.replit.app"
                logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback –¥–æ–º–µ–Ω: {replit_domain}")
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º webhook URL
        if replit_domain:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É Application[bot=ExtBot] –∏–∑ URL
            if isinstance(replit_domain, str):
                webhook_url = f"https://{replit_domain}/webhook/{TELEGRAM_TOKEN}"
            else:
                # –ï—Å–ª–∏ replit_domain –Ω–µ —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
                import os
                slug = os.environ.get("REPL_SLUG", "")
                owner = os.environ.get("REPL_OWNER", "")
                if slug and owner:
                    webhook_url = f"https://{slug}.{owner}.repl.co/webhook/{TELEGRAM_TOKEN}"
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–µ–Ω Replit –∏–∑ Application –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    return False
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–µ–Ω Replit")
            return False
        
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ URL: {webhook_url}")
        
        # –í—ã–∑—ã–≤–∞–µ–º API Telegram –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
        import requests
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–µ–±—Ö—É–∫ –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        delete_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook"
        delete_response = requests.post(delete_url)
        if delete_response.status_code == 200:
            logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π webhook —É–¥–∞–ª–µ–Ω: {delete_response.json()}")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {delete_response.text}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏–µ–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        import time
        time.sleep(1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é
        set_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
        params = {
            "url": webhook_url,
            "max_connections": 40,
            "drop_pending_updates": True,
            "allowed_updates": ["message", "callback_query", "chat_member"]
        }
        
        response = requests.post(set_url, json=params)
        
        if response.status_code == 200 and response.json().get("ok", False):
            logger.info(f"Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response.json()}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: {e}", exc_info=True)
        return False

def register_webhook_routes(app):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã webhook –≤ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
    
    Args:
        app: –≠–∫–∑–µ–º–ø–ª—è—Ä Flask
    """
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Blueprint –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        try:
            app.register_blueprint(webhook_bp, url_prefix='/webhook')
            logger.info("–ú–∞—Ä—à—Ä—É—Ç—ã webhook —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"Blueprint —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ webhook: {e}", exc_info=True)