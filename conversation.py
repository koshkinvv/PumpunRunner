import re
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ python-telegram-bot
try:
    from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, ReplyKeyboardRemove
    from telegram.ext import CallbackContext, ConversationHandler
except ImportError:
    # –î–ª—è LSP - —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
    class Update:
        pass
    
    class CallbackContext:
        pass
    
    class ConversationHandler:
        END = -1

from config import STATES, logging
from db_manager import DBManager

class RunnerProfileConversation:
    """Manages the conversation flow for collecting runner profile information."""
    
    def __init__(self):
        """Initialize the conversation handler with empty profile data dict."""
        self.user_data = {}
    
    async def start_update(self, update: Update, context: CallbackContext):
        """Start the conversation for updating profile information."""
        user = update.effective_user
        telegram_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user_id = DBManager.get_user_id(telegram_id)
        if not db_user_id:
            await update.message.reply_text(
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
        runner_profile = DBManager.get_runner_profile(db_user_id)
        if not runner_profile:
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
            )
            return ConversationHandler.END
        
        # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ - –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        context.user_data['db_user_id'] = db_user_id
        context.user_data['profile_data'] = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        context.user_data['is_profile_update'] = True
        
        # –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–π –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        await update.message.reply_text(
            f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ /cancel.\n\n"
            f"–¢–µ–∫—É—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {runner_profile.get('distance', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–º\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (–≤ –∫–º):",
            reply_markup=ReplyKeyboardMarkup(
                [['5', '10'], ['21', '42']], 
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        
        return STATES['DISTANCE']
    
    async def start(self, update: Update, context: CallbackContext):
        """Start the conversation and save user information."""
        user = update.effective_user
        telegram_id = user.id
        
        # Save user to database
        user_id = DBManager.add_user(
            telegram_id,
            user.username,
            user.first_name,
            user.last_name
        )
        
        if not user_id:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å
        existing_profile = DBManager.get_runner_profile(user_id)
        if existing_profile:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞."
            )
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            from bot_modified import send_main_menu
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await send_main_menu(update, context, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
            
            return ConversationHandler.END
        
        # Store user_id in context.user_data
        context.user_data['db_user_id'] = user_id
        context.user_data['profile_data'] = {}
        
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        reply_markup = ReplyKeyboardMarkup(
            [['5', '10'], ['21', '42']], 
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. "
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–∏—Ö –±–µ–≥–æ–≤—ã—Ö —Ü–µ–ª—è—Ö.\n\n"
            "–ö–∞–∫—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –±–µ–≥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–±–µ–∂–∞—Ç—å (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)?",
            reply_markup=reply_markup
        )
        
        return STATES['DISTANCE']
    
    async def collect_distance(self, update: Update, context: CallbackContext):
        """Collect and validate running distance."""
        text = update.message.text.strip()
        
        # Validate distance
        try:
            distance = float(text.replace(',', '.'))
            if distance <= 0:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏."
                )
                return STATES['DISTANCE']
            
            context.user_data['profile_data']['distance'] = distance
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–µ—Ç" –¥–ª—è –≤—ã–±–æ—Ä–∞
            reply_markup = ReplyKeyboardMarkup(
                [['–ù–µ—Ç']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–±–µ–∂–∞—Ç—å {distance} –∫–º.\n\n"
                "–ö–æ–≥–¥–∞ —É –≤–∞—Å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì "
                "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return STATES['COMPETITION_DATE']
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö."
            )
            return STATES['DISTANCE']
    
    async def collect_competition_date(self, update: Update, context: CallbackContext):
        """Collect and validate competition date."""
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ "–ù–µ—Ç"
        if text == '–ù–µ—Ç':
            context.user_data['profile_data']['competition_date'] = '–ù–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã'
            
            # Ask for gender with keyboard
            reply_markup = ReplyKeyboardMarkup(
                [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']], 
                one_time_keyboard=True,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=reply_markup
            )
            return STATES['GENDER']
        
        # Validate date format
        date_pattern = r'^(\d{1,2})\.(\d{1,2})\.(\d{4})$'
        match = re.match(date_pattern, text)
        
        if not match:
            reply_markup = ReplyKeyboardMarkup(
                [['–ù–µ—Ç']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2023) "
                "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return STATES['COMPETITION_DATE']
        
        day, month, year = map(int, match.groups())
        
        try:
            date_obj = datetime(year, month, day)
            today = datetime.now()
            
            if date_obj < today:
                reply_markup = ReplyKeyboardMarkup(
                    [['–ù–µ—Ç']],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
                await update.message.reply_text(
                    "–î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É "
                    "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.",
                    reply_markup=reply_markup
                )
                return STATES['COMPETITION_DATE']
            
            context.user_data['profile_data']['competition_date'] = text
            
            # Ask for gender with keyboard
            reply_markup = ReplyKeyboardMarkup(
                [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']], 
                one_time_keyboard=True,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
                reply_markup=reply_markup
            )
            return STATES['GENDER']
            
        except ValueError:
            reply_markup = ReplyKeyboardMarkup(
                [['–ù–µ—Ç']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì "
                "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.",
                reply_markup=reply_markup
            )
            return STATES['COMPETITION_DATE']
    
    async def collect_gender(self, update: Update, context: CallbackContext):
        """Collect gender information."""
        text = update.message.text.strip()
        
        if text not in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
            reply_markup = ReplyKeyboardMarkup(
                [['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']], 
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ú—É–∂—Å–∫–æ–π' –∏–ª–∏ '–ñ–µ–Ω—Å–∫–∏–π'.",
                reply_markup=reply_markup
            )
            return STATES['GENDER']
        
        context.user_data['profile_data']['gender'] = text
        
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
            reply_markup=ReplyKeyboardRemove()
        )
        return STATES['AGE']
    
    async def collect_age(self, update: Update, context: CallbackContext):
        """Collect and validate age."""
        text = update.message.text.strip()
        
        try:
            age = int(text)
            if age < 10 or age > 120:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 10 –¥–æ 120 –ª–µ—Ç."
                )
                return STATES['AGE']
            
            context.user_data['profile_data']['age'] = age
            
            await update.message.reply_text(
                "–ö–∞–∫–æ–π —É –≤–∞—Å —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö?"
            )
            return STATES['HEIGHT']
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."
            )
            return STATES['AGE']
    
    async def collect_height(self, update: Update, context: CallbackContext):
        """Collect and validate height."""
        text = update.message.text.strip()
        
        try:
            height = float(text.replace(',', '.'))
            if height < 100 or height > 250:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 100 –¥–æ 250 —Å–º."
                )
                return STATES['HEIGHT']
            
            context.user_data['profile_data']['height'] = height
            
            await update.message.reply_text(
                "–ö–∞–∫–æ–π —É –≤–∞—Å –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö?"
            )
            return STATES['WEIGHT']
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö."
            )
            return STATES['HEIGHT']
    
    async def collect_weight(self, update: Update, context: CallbackContext):
        """Collect and validate weight."""
        text = update.message.text.strip()
        
        try:
            weight = float(text.replace(',', '.'))
            if weight < 30 or weight > 250:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 30 –¥–æ 250 –∫–≥."
                )
                return STATES['WEIGHT']
            
            context.user_data['profile_data']['weight'] = weight
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ–± –æ–ø—ã—Ç–µ –±–µ–≥–∞
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
            context.user_data['profile_data']['experience'] = 'N/A'
            
            # Ask about running goal
            reply_markup = ReplyKeyboardMarkup(
                [['–ü—Ä–æ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞—Ç—å', '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                "–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –Ω–∞ —ç—Ç–æ–º –∑–∞–±–µ–≥–µ?",
                reply_markup=reply_markup
            )
            return STATES['GOAL']
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö."
            )
            return STATES['WEIGHT']
    
    async def collect_experience(self, update: Update, context: CallbackContext):
        """Collect running experience."""
        text = update.message.text.strip()
        valid_experiences = [
            '–ü–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫',
            '–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞',
            '1-3 –≥–æ–¥–∞',
            '3-5 –ª–µ—Ç',
            '–ë–æ–ª–µ–µ 5 –ª–µ—Ç'
        ]
        
        if text not in valid_experiences:
            reply_markup = ReplyKeyboardMarkup(
                [
                    ['–ü–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫'],
                    ['–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞'],
                    ['1-3 –≥–æ–¥–∞'],
                    ['3-5 –ª–µ—Ç'],
                    ['–ë–æ–ª–µ–µ 5 –ª–µ—Ç']
                ],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                reply_markup=reply_markup
            )
            return STATES['EXPERIENCE']
        
        context.user_data['profile_data']['experience'] = text
        
        # Ask about running goal
        reply_markup = ReplyKeyboardMarkup(
            [['–ü—Ä–æ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞—Ç—å', '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è']],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "–ö–∞–∫–æ–≤–∞ –≤–∞—à–∞ —Ü–µ–ª—å –Ω–∞ —ç—Ç–æ–º –∑–∞–±–µ–≥–µ?",
            reply_markup=reply_markup
        )
        return STATES['GOAL']
    
    async def collect_goal(self, update: Update, context: CallbackContext):
        """Collect runner's goal."""
        text = update.message.text.strip()
        
        if text not in ['–ü—Ä–æ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞—Ç—å', '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è']:
            reply_markup = ReplyKeyboardMarkup(
                [['–ü—Ä–æ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞—Ç—å', '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ—Å—Ç–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞—Ç—å' –∏–ª–∏ '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è'.",
                reply_markup=reply_markup
            )
            return STATES['GOAL']
        
        context.user_data['profile_data']['goal'] = text
        
        if text == '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è':
            await update.message.reply_text(
                "–ö–∞–∫–æ–µ —É –≤–∞—Å —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:–°–°",
                reply_markup=ReplyKeyboardRemove()
            )
            return STATES['TARGET_TIME']
        else:
            # Skip target time question for 'Just finish' goal
            context.user_data['profile_data']['target_time'] = 'N/A'
            
            # Ask about fitness level
            reply_markup = ReplyKeyboardMarkup(
                [
                    ['–ù–∞—á–∏–Ω–∞—é—â–∏–π'],
                    ['–°—Ä–µ–¥–Ω–∏–π'],
                    ['–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'],
                    ['–≠–ª–∏—Ç–Ω—ã–π']
                ],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
                reply_markup=reply_markup
            )
            return STATES['FITNESS']
    
    async def collect_target_time(self, update: Update, context: CallbackContext):
        """Collect and validate target finish time."""
        text = update.message.text.strip()
        
        # Validate time format
        time_pattern = r'^(\d{1,2}):(\d{1,2})(?::(\d{1,2}))?$'
        match = re.match(time_pattern, text)
        
        if not match:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01:30:00)"
            )
            return STATES['TARGET_TIME']
        
        context.user_data['profile_data']['target_time'] = text
        
        # Ask about fitness level
        reply_markup = ReplyKeyboardMarkup(
            [
                ['–ù–∞—á–∏–Ω–∞—é—â–∏–π'],
                ['–°—Ä–µ–¥–Ω–∏–π'],
                ['–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'],
                ['–≠–ª–∏—Ç–Ω—ã–π']
            ],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "–ö–∞–∫ –±—ã –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?",
            reply_markup=reply_markup
        )
        return STATES['FITNESS']
    
    async def collect_fitness(self, update: Update, context: CallbackContext):
        """Collect fitness level."""
        text = update.message.text.strip()
        valid_levels = ['–ù–∞—á–∏–Ω–∞—é—â–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '–≠–ª–∏—Ç–Ω—ã–π']
        
        if text not in valid_levels:
            reply_markup = ReplyKeyboardMarkup(
                [
                    ['–ù–∞—á–∏–Ω–∞—é—â–∏–π'],
                    ['–°—Ä–µ–¥–Ω–∏–π'],
                    ['–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'],
                    ['–≠–ª–∏—Ç–Ω—ã–π']
                ],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.",
                reply_markup=reply_markup
            )
            return STATES['FITNESS']
        
        context.user_data['profile_data']['fitness_level'] = text
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±—ä–µ–º–æ–≤ –±–µ–≥–∞
        reply_markup = ReplyKeyboardMarkup(
            [
                ['0-10'],
                ['10-25'],
                ['25-50'],
                ['50+']
            ],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö?",
            reply_markup=reply_markup
        )
        return STATES['WEEKLY_VOLUME']
    
    async def collect_weekly_volume(self, update: Update, context: CallbackContext):
        """Collect and validate weekly running volume."""
        text = update.message.text.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        if text == '0-10':
            volume_text = '0-10'
            volume = 5  # —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        elif text == '10-25':
            volume_text = '10-25'
            volume = 17.5  # —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        elif text == '25-50':
            volume_text = '25-50'
            volume = 37.5  # —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        elif text == '50+':
            volume_text = '50+'
            volume = 50  # –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        else:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
            try:
                volume = float(text.replace(',', '.'))
                volume_text = f"{volume}"
                
                if volume < 0 or volume > 500:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—ä–µ–º–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    reply_markup = ReplyKeyboardMarkup(
                        [
                            ['0-10'],
                            ['10-25'],
                            ['25-50'],
                            ['50+']
                        ],
                        one_time_keyboard=True,
                        resize_keyboard=True
                    )
                    await update.message.reply_text(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ—Ç 0 –¥–æ 500 –∫–º.",
                        reply_markup=reply_markup
                    )
                    return STATES['WEEKLY_VOLUME']
            except ValueError:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ–±—ä–µ–º–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                reply_markup = ReplyKeyboardMarkup(
                    [
                        ['0-10'],
                        ['10-25'],
                        ['25-50'],
                        ['50+']
                    ],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                    reply_markup=reply_markup
                )
                return STATES['WEEKLY_VOLUME']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —á–∏—Å–ª–æ–≤–æ–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        context.user_data['profile_data']['weekly_volume'] = volume
        context.user_data['profile_data']['weekly_volume_text'] = volume_text
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        reply_markup = ReplyKeyboardMarkup(
            [['–ù–µ –∑–Ω–∞—é']],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú "
            "–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–µ –∑–Ω–∞—é', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å—Ä–∞–∑—É.",
            reply_markup=reply_markup
        )
        return STATES['TRAINING_START_DATE']
    
    async def collect_training_start_date(self, update: Update, context: CallbackContext):
        """Collect and validate training start date."""
        text = update.message.text
        
        if text == '–ù–µ –∑–Ω–∞—é':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            today = datetime.now().strftime("%d.%m.%Y")
            context.user_data['profile_data']['training_start_date'] = today
            context.user_data['profile_data']['training_start_date_text'] = "–°–µ–≥–æ–¥–Ω—è"
        else:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            date_pattern = r'^(\d{1,2})\.(\d{1,2})$'
            match = re.match(date_pattern, text)
            
            if not match:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.06) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–µ –∑–Ω–∞—é'.",
                    reply_markup=ReplyKeyboardMarkup(
                        [['–ù–µ –∑–Ω–∞—é']],
                        one_time_keyboard=True,
                        resize_keyboard=True
                    )
                )
                return STATES['TRAINING_START_DATE']
            
            day, month = map(int, match.groups())
            current_year = datetime.now().year
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –∫ –¥–∞—Ç–µ
                date_obj = datetime(current_year, month, day)
                date_str = date_obj.strftime("%d.%m.%Y")
                
                context.user_data['profile_data']['training_start_date'] = date_str
                context.user_data['profile_data']['training_start_date_text'] = text
            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. "
                    "–î–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 31, –º–µ—Å—è—Ü - –æ—Ç 1 –¥–æ 12.",
                    reply_markup=ReplyKeyboardMarkup(
                        [['–ù–µ –∑–Ω–∞—é']],
                        one_time_keyboard=True,
                        resize_keyboard=True
                    )
                )
                return STATES['TRAINING_START_DATE']
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è
        reply_markup = ReplyKeyboardMarkup(
            [['2', '3', '4'], ['5', '6', '7']],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
            reply_markup=reply_markup
        )
        return STATES['TRAINING_DAYS_PER_WEEK']
    
    async def collect_training_days_per_week(self, update: Update, context: CallbackContext):
        """Collect and validate training days per week."""
        text = update.message.text.strip()
        
        try:
            days = int(text)
            if days < 1 or days > 7:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7:"
                )
                return STATES['TRAINING_DAYS_PER_WEEK']
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            context.user_data['profile_data']['training_days_per_week'] = text
            context.user_data['days_to_select'] = days
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            days_of_week = [["–ü–Ω", "–í—Ç", "–°—Ä"], ["–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]
            reply_markup = ReplyKeyboardMarkup(
                days_of_week,
                one_time_keyboard=False,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ {days} –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω,–°—Ä,–ü—Ç):",
                reply_markup=reply_markup
            )
            return STATES['PREFERRED_TRAINING_DAYS']
            
        except ValueError:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7:"
            )
            return STATES['TRAINING_DAYS_PER_WEEK']
    
    async def collect_preferred_training_days(self, update: Update, context: CallbackContext):
        """Collect and validate preferred training days."""
        text = update.message.text.strip()
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        if context.user_data.get('confirming_days_mismatch'):
            if text == '–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–Ω–∏
                selected_days = context.user_data.get('temp_selected_days', "")
                context.user_data['profile_data']['preferred_training_days'] = selected_days
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                del context.user_data['confirming_days_mismatch']
                del context.user_data['temp_selected_days']
                if 'days_to_select' in context.user_data:
                    del context.user_data['days_to_select']
                if 'selected_days_list' in context.user_data:
                    del context.user_data['selected_days_list']
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                return await self.show_confirmation(update, context)
            elif text == '–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω–µ–π
                days_to_select = int(context.user_data.get('days_to_select', 3))
                
                days_of_week = [["–ü–Ω", "–í—Ç", "–°—Ä"], ["–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]
                reply_markup = ReplyKeyboardMarkup(
                    days_of_week,
                    one_time_keyboard=False,
                    resize_keyboard=True
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                del context.user_data['confirming_days_mismatch']
                if 'temp_selected_days' in context.user_data:
                    del context.user_data['temp_selected_days']
                if 'selected_days_list' in context.user_data:
                    del context.user_data['selected_days_list']
                
                await update.message.reply_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ {days_to_select} –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
                    f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–Ω,–°—Ä,–ü—Ç):",
                    reply_markup=reply_markup
                )
                return STATES['PREFERRED_TRAINING_DAYS']
            else:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞
                reply_markup = ReplyKeyboardMarkup(
                    [['–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º', '–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ']],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
                
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
                    reply_markup=reply_markup
                )
                return STATES['PREFERRED_TRAINING_DAYS']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞)
        valid_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        if text in valid_days:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å –æ–¥–Ω–∏–º –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
            selected_days_list = context.user_data.get('selected_days_list', [])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –¥–µ–Ω—å
            if text in selected_days_list:
                # –î–µ–Ω—å —É–∂–µ –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞
                selected_days_list.remove(text)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ —Å–ø–∏—Å–æ–∫
                selected_days_list.append(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            context.user_data['selected_days_list'] = selected_days_list
            days_to_select = int(context.user_data.get('days_to_select', 3))
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–µ–∫—É—â–µ–º –≤—ã–±–æ—Ä–µ
            current_selection = ", ".join(selected_days_list) if selected_days_list else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            days_of_week = [["–ü–Ω", "–í—Ç", "–°—Ä"], ["–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏
            if selected_days_list:
                days_of_week.append(["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"])
            
            reply_markup = ReplyKeyboardMarkup(
                days_of_week,
                one_time_keyboard=False,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {len(selected_days_list)} –∏–∑ {days_to_select} –¥–Ω–µ–π: {current_selection}\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤—ã–±–æ—Ä –¥–Ω–µ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.",
                reply_markup=reply_markup
            )
            return STATES['PREFERRED_TRAINING_DAYS']
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        if text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä":
            selected_days_list = context.user_data.get('selected_days_list', [])
            
            if not selected_days_list:
                await update.message.reply_text(
                    "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –¥–µ–Ω—å:"
                )
                return STATES['PREFERRED_TRAINING_DAYS']
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
            selected_days_str = ",".join(selected_days_list)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            days_to_select = int(context.user_data.get('days_to_select', 3))
            if len(selected_days_list) != days_to_select:
                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                context.user_data['temp_selected_days'] = selected_days_str
                
                reply_markup = ReplyKeyboardMarkup(
                    [['–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º', '–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ']],
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
                
                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {len(selected_days_list)} –¥–Ω–µ–π, —Ö–æ—Ç—è —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è {days_to_select} –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º ({', '.join(selected_days_list)})?\n\n"
                    f"–ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=reply_markup
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
                context.user_data['confirming_days_mismatch'] = True
                return STATES['PREFERRED_TRAINING_DAYS']
            
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
            context.user_data['profile_data']['preferred_training_days'] = selected_days_str
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if 'temp_selected_days' in context.user_data:
                del context.user_data['temp_selected_days']
            if 'confirming_days_mismatch' in context.user_data:
                del context.user_data['confirming_days_mismatch']
            if 'days_to_select' in context.user_data:
                del context.user_data['days_to_select']
            if 'selected_days_list' in context.user_data:
                del context.user_data['selected_days_list']
                
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            return await self.show_confirmation(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        selected_days = [day.strip() for day in text.split(',')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–Ω–∏ —è–≤–ª—è—é—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
        if not all(day in valid_days for day in selected_days):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å) –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:"
            )
            return STATES['PREFERRED_TRAINING_DAYS']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if len(selected_days) != len(set(selected_days)):
            await update.message.reply_text(
                "–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–Ω–∏ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑:"
            )
            return STATES['PREFERRED_TRAINING_DAYS']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        days_to_select = int(context.user_data.get('days_to_select', 3))
        if len(selected_days) != days_to_select:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            context.user_data['temp_selected_days'] = text
            
            reply_markup = ReplyKeyboardMarkup(
                [['–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º', '–ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            
            await update.message.reply_text(
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {len(selected_days)} –¥–Ω–µ–π, —Ö–æ—Ç—è —É–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è {days_to_select} –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—ã–±–æ—Ä–æ–º ({', '.join(selected_days)})?\n\n"
                f"–ï—Å–ª–∏ –Ω–µ—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–Ω–∏ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=reply_markup
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
            context.user_data['confirming_days_mismatch'] = True
            return STATES['PREFERRED_TRAINING_DAYS']
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä
        context.user_data['profile_data']['preferred_training_days'] = text
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if 'temp_selected_days' in context.user_data:
            del context.user_data['temp_selected_days']
        if 'confirming_days_mismatch' in context.user_data:
            del context.user_data['confirming_days_mismatch']
        if 'days_to_select' in context.user_data:
            del context.user_data['days_to_select']
        if 'selected_days_list' in context.user_data:
            del context.user_data['selected_days_list']
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        return await self.show_confirmation(update, context)
    
    async def show_confirmation(self, update: Update, context: CallbackContext):
        """Display profile summary and ask for confirmation."""
        # Display summary of collected information
        profile = context.user_data['profile_data']
        summary = (
            "–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Å–≤–æ–¥–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞:\n\n"
            f"üèÉ –¶–µ–ª–µ–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {profile['distance']} –∫–º\n"
            f"üìÖ –î–∞—Ç–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è: {profile['competition_date']}\n"
            f"üë§ –ü–æ–ª: {profile['gender']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
            f"üìè –†–æ—Å—Ç: {profile['height']} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {profile['weight']} –∫–≥\n"
            f"üéØ –¶–µ–ª—å: {profile['goal']}\n"
            f"üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {profile.get('training_start_date_text', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        )
        
        if profile['goal'] == '–£–ª—É—á—à–∏—Ç—å –≤—Ä–µ–º—è':
            summary += f"‚è±Ô∏è –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: {profile['target_time']}\n"
            
        summary += (
            f"üí™ –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {profile['fitness_level']}\n"
            f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º: {profile['weekly_volume_text']} –∫–º\n"
            f"üóìÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: {profile['training_days_per_week']}\n"
            f"üìÜ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {profile['preferred_training_days']}\n\n"
            "–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–µ—Ä–Ω–∞?"
        )
        
        reply_markup = ReplyKeyboardMarkup(
            [['–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']],
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        await update.message.reply_text(
            summary,
            reply_markup=reply_markup
        )
        return STATES['CONFIRMATION']
    
    async def confirm_data(self, update: Update, context: CallbackContext):
        """Handle user confirmation of collected data."""
        text = update.message.text.strip()
        
        if text == '–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
            user_id = context.user_data.get('db_user_id')
            profile_data = context.user_data.get('profile_data', {})
            
            # Save profile to database
            if DBManager.save_runner_profile(user_id, profile_data):
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
                context.user_data['profile_updated'] = True
                
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. "
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                from bot_modified import send_main_menu
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
                await send_main_menu(update, context, 
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ."
                )
            else:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardRemove()
                )
            
            return ConversationHandler.END
            
        elif text == '–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
            # Clear user data and restart
            context.user_data['profile_data'] = {}
            
            await update.message.reply_text(
                "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –ö–∞–∫—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –±–µ–≥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–±–µ–∂–∞—Ç—å (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö)?",
                reply_markup=ReplyKeyboardRemove()
            )
            return STATES['DISTANCE']
            
        else:
            reply_markup = ReplyKeyboardMarkup(
                [['–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']],
                one_time_keyboard=True,
                resize_keyboard=True
            )
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –∏–ª–∏ '–ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'.",
                reply_markup=reply_markup
            )
            return STATES['CONFIRMATION']
    
    async def cancel(self, update: Update, context: CallbackContext):
        """Cancel the conversation."""
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from bot_modified import send_main_menu
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        await send_main_menu(update, context, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
        
        return ConversationHandler.END
    
    def get_conversation_handler(self):
        """Return the ConversationHandler with all states defined."""
        from telegram.ext import (
            CommandHandler, MessageHandler, filters, ConversationHandler
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        main_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                STATES['DISTANCE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_distance)],
                STATES['COMPETITION_DATE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_competition_date)],
                STATES['GENDER']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_gender)],
                STATES['AGE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_age)],
                STATES['HEIGHT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_height)],
                STATES['WEIGHT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_weight)],
                STATES['GOAL']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_goal)],
                STATES['TARGET_TIME']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_target_time)],
                STATES['FITNESS']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_fitness)],
                STATES['WEEKLY_VOLUME']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_weekly_volume)],
                STATES['TRAINING_START_DATE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_training_start_date)],
                STATES['TRAINING_DAYS_PER_WEEK']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_training_days_per_week)],
                STATES['PREFERRED_TRAINING_DAYS']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_preferred_training_days)],
                STATES['CONFIRMATION']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_data)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            name="runner_profile_conversation",
            persistent=False,
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∞—Å—Å ConversationHandler –¥–ª—è –æ–±–æ–∏—Ö —Å–ª—É—á–∞–µ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        # –û—Ç–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º, —á—Ç–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        update_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex(r'^‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å$'), self.start_update)],
            states={
                STATES['DISTANCE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_distance)],
                STATES['COMPETITION_DATE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_competition_date)],
                STATES['GENDER']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_gender)],
                STATES['AGE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_age)],
                STATES['HEIGHT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_height)],
                STATES['WEIGHT']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_weight)],
                STATES['GOAL']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_goal)],
                STATES['TARGET_TIME']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_target_time)],
                STATES['FITNESS']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_fitness)],
                STATES['WEEKLY_VOLUME']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_weekly_volume)],
                STATES['TRAINING_START_DATE']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_training_start_date)],
                STATES['TRAINING_DAYS_PER_WEEK']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_training_days_per_week)],
                STATES['PREFERRED_TRAINING_DAYS']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.collect_preferred_training_days)],
                STATES['CONFIRMATION']: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.confirm_data)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            name="update_profile_conversation",
            persistent=False,
        )
        
        return [main_handler, update_handler]
