#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""

import os
import sys
import time
import json
import psutil
import logging
import argparse
import datetime
import subprocess
import requests

from telegram import Bot
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger('status_notifier')

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    sys.exit(1)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à ID)
ADMIN_ID = None  # –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
HEALTH_FILE = "bot_health.txt"

def get_bot_health():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞."""
    if not os.path.exists(HEALTH_FILE):
        return {
            "status": "unknown",
            "last_update": None,
            "alive": False,
            "message": "–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    
    try:
        with open(HEALTH_FILE, "r") as f:
            last_update = f.read().strip()
        
        last_time = datetime.datetime.strptime(last_update, "%Y-%m-%d %H:%M:%S")
        current_time = datetime.datetime.now()
        
        time_diff = (current_time - last_time).total_seconds()
        
        if time_diff <= 60:
            status = "healthy"
            message = "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            alive = True
        elif time_diff <= 300:
            status = "warning"
            message = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {int(time_diff // 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
            alive = True
        else:
            status = "critical"
            message = f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {int(time_diff // 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
            alive = False
        
        return {
            "status": status,
            "last_update": last_update,
            "alive": alive,
            "message": message,
            "seconds_since_update": int(time_diff)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞: {e}")
        return {
            "status": "error",
            "last_update": None,
            "alive": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }

def get_system_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""
    try:
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        return {
            "cpu_percent": psutil.cpu_percent(interval=0.1),
            "memory_percent": memory.percent,
            "memory_used": memory.used // (1024 * 1024),  # –í –ú–ë
            "memory_total": memory.total // (1024 * 1024),  # –í –ú–ë
            "disk_percent": disk.percent,
            "disk_used": disk.used // (1024 * 1024 * 1024),  # –í –ì–ë
            "disk_total": disk.total // (1024 * 1024 * 1024),  # –í –ì–ë
            "uptime": int(time.time() - psutil.boot_time()),  # –í —Å–µ–∫—É–Ω–¥–∞—Ö
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            "error": str(e)
        }

def get_bot_processes():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö –±–æ—Ç–∞."""
    try:
        processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'cpu_percent', 'memory_percent', 'create_time']):
            try:
                if proc.info['cmdline'] and any(cmd in str(proc.info['cmdline']) for cmd in ['main.py', 'bot_monitor.py', 'run.py']):
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    proc_info = proc.as_dict(['pid', 'name', 'cpu_percent', 'memory_percent', 'create_time'])
                    proc_info['cmdline'] = ' '.join(proc.info['cmdline'])
                    proc_info['running_time'] = int(time.time() - proc.info['create_time'])
                    processes.append(proc_info)
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        return processes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö: {e}")
        return []

def get_recent_errors(num_lines=20):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤."""
    try:
        if not os.path.exists("logs"):
            return {}
            
        errors = {}
        log_files = [f for f in os.listdir("logs") if f.endswith(".log")]
        
        for log_file in log_files[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 5 —Å–∞–º—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
            file_path = os.path.join("logs", log_file)
            try:
                with open(file_path, "r") as f:
                    content = f.readlines()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ ERROR –∏–ª–∏ Exception)
                error_lines = [line for line in content if 'ERROR' in line or 'Exception' in line or 'error' in line.lower()]
                if error_lines:
                    errors[log_file] = error_lines[-num_lines:] if len(error_lines) > num_lines else error_lines
            except Exception as e:
                errors[log_file] = [f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"]
        
        return errors
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫: {e}")
        return {"error": str(e)}

async def send_notification(admin_id, message, parse_mode=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram."""
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        await bot.send_message(
            chat_id=admin_id,
            text=message,
            parse_mode=parse_mode
        )
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

async def send_status_report(admin_id, event_type="regular"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    health = get_bot_health()
    system = get_system_stats()
    processes = get_bot_processes()
    errors = get_recent_errors()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    if event_type == "startup":
        header = "üöÄ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω*\n\n"
    elif event_type == "critical":
        header = "üî¥ *–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–û–¢–ê*\n\n"
    elif event_type == "warning":
        header = "‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ*\n\n"
    else:
        header = "üìä *–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞*\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ
    health_status = {
        "healthy": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
        "warning": "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
        "critical": "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    }.get(health["status"], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    health_info = f"*–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞:* {health_status}\n"
    health_info += f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* {health['message']}\n"
    if health["last_update"]:
        health_info += f"*–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {health['last_update']}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    if "error" in system:
        system_info = f"*–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:* {system['error']}\n"
    else:
        system_info = f"*CPU:* {system['cpu_percent']}%\n"
        system_info += f"*–ü–∞–º—è—Ç—å:* {system['memory_used']} –ú–ë –∏–∑ {system['memory_total']} –ú–ë ({system['memory_percent']}%)\n"
        system_info += f"*–î–∏—Å–∫:* {system['disk_used']} –ì–ë –∏–∑ {system['disk_total']} –ì–ë ({system['disk_percent']}%)\n"
        uptime_hours = system['uptime'] // 3600
        uptime_mins = (system['uptime'] % 3600) // 60
        system_info += f"*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã VM:* {uptime_hours} —á. {uptime_mins} –º–∏–Ω.\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    if processes:
        process_info = "*–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞:*\n"
        for proc in processes:
            runtime_hours = proc['running_time'] // 3600
            runtime_mins = (proc['running_time'] % 3600) // 60
            process_info += f"- PID {proc['pid']}: {proc['name']} (CPU: {proc['cpu_percent']:.1f}%, –ü–∞–º—è—Ç—å: {proc['memory_percent']:.1f}%, –í—Ä–µ–º—è: {runtime_hours} —á. {runtime_mins} –º–∏–Ω.)\n"
    else:
        process_info = "*–ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã*\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    if errors and any(errors.values()):
        error_info = "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:*\n"
        for log_file, error_lines in errors.items():
            if error_lines:
                error_info += f"–ò–∑ {log_file}:\n"
                for i, line in enumerate(error_lines[-3:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
                    error_info += f"  {i+1}. `{line.strip()[:100]}...`\n" if len(line.strip()) > 100 else f"  {i+1}. `{line.strip()}`\n"
    else:
        error_info = "*–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ*\n"
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"{header}{health_info}\n{system_info}\n{process_info}\n{error_info}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    if health['status'] in ['critical', 'warning'] or not processes:
        message += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        if not processes:
            message += "- –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π `python run.py`\n"
        elif health['status'] == 'critical':
            message += "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫\n"
            message += "- –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π `python run.py`\n"
        elif health['status'] == 'warning':
            message += "- –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent = await send_notification(admin_id, message, parse_mode="Markdown")
    return sent

async def find_admin():
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞ (–ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É)."""
    try:
        bot = Bot(token=TELEGRAM_TOKEN)
        updates = await bot.get_updates(limit=100, timeout=10)
        
        if updates:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–º
            for update in updates:
                if update.message and update.message.from_user and not update.message.from_user.is_bot:
                    return update.message.from_user.id
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return None

async def main():
    parser = argparse.ArgumentParser(description='–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞')
    parser.add_argument('--admin-id', type=int, help='ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram')
    parser.add_argument('--type', choices=['regular', 'startup', 'critical', 'warning'], 
                        default='regular', help='–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    parser.add_argument('--check', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö')
    args = parser.parse_args()
    
    global ADMIN_ID
    ADMIN_ID = args.admin_id
    
    # –ï—Å–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –µ–≥–æ
    if not ADMIN_ID:
        ADMIN_ID = await find_admin()
        if not ADMIN_ID:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ —è–≤–Ω–æ —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ --admin-id")
            return
    
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_ID}")
    
    if args.check:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
        health = get_bot_health()
        processes = get_bot_processes()
        
        if health['status'] == 'critical':
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            await send_status_report(ADMIN_ID, event_type="critical")
        elif health['status'] == 'warning':
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            await send_status_report(ADMIN_ID, event_type="warning")
        elif not processes:
            logger.info("–ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            await send_status_report(ADMIN_ID, event_type="critical")
        else:
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –≤ –Ω–æ—Ä–º–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await send_status_report(ADMIN_ID, event_type=args.type)

if __name__ == "__main__":
    asyncio.run(main())