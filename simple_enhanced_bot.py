import os
import json
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ConversationHandler
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from config import TELEGRAM_TOKEN, logging
from models import create_tables
from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from openai_service import OpenAIService
from conversation import RunnerProfileConversation

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
from improved_training_format import format_training_day

def format_weekly_volume(volume, default_value="0"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –±–µ–≥–∞, –∏–∑–±–µ–≥–∞—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è None.
    
    Args:
        volume: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ None –∏–ª–∏ "None"
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–±—ä–µ–º–æ–º –±–µ–≥–∞
    """
    if volume is None or volume == "None" or not volume:
        return f"{default_value} –∫–º/–Ω–µ–¥–µ–ª—é"
    
    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(volume, str) and ("–∫–º/–Ω–µ–¥–µ–ª—é" in volume or "–∫–º" in volume):
        return volume
    
    # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    return f"{volume} –∫–º/–Ω–µ–¥–µ–ª—é"

async def help_command(update, context):
    """Handler for the /help command."""
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–≥—É–Ω–æ–≤. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
        "/plan - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/pending - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @run_coach_support"
    )
    await update.message.reply_text(help_text)

async def pending_trainings_command(update, context):
    """Handler for the /pending command - shows only pending (not completed) trainings."""
    user_id = update.message.from_user.id
    db_manager = DBManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
    current_plan = db_manager.get_current_plan(user_id)
    if not current_plan:
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    training_manager = TrainingPlanManager(user_id)
    plan_data = training_manager.get_training_plan(current_plan['id'])
    
    if not plan_data or 'plan_data' not in plan_data or 'training_days' not in plan_data['plan_data']:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /plan."
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    pending_days = []
    completed_count = 0
    canceled_count = 0
    
    for i, day in enumerate(plan_data['plan_data']['training_days'], 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        status = training_manager.get_training_status(current_plan['id'], i)
        
        if status == 'completed':
            completed_count += 1
        elif status == 'canceled':
            canceled_count += 1
        else:
            pending_days.append((i, day))
    
    if not pending_days:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        total_days = len(plan_data['plan_data']['training_days'])
        await update.message.reply_text(
            f"üéâ –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} –∏–∑ {total_days}\n"
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {canceled_count} –∏–∑ {total_days}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ /plan."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    pending_to_show = pending_days[:3]
    
    for i, day in pending_to_show:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        formatted_day = format_training_day(day, i)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_training_{current_plan['id']}_{i}"),
                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"cancel_training_{current_plan['id']}_{i}")
            ]
        ])
        
        await update.message.reply_text(formatted_day, reply_markup=keyboard, parse_mode='Markdown')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_days = len(plan_data['plan_data']['training_days'])
    remaining_days = len(pending_days)
    
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∞:*\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} –∏–∑ {total_days}\n"
        f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {canceled_count} –∏–∑ {total_days}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining_days} –∏–∑ {total_days}"
    )
    
    if remaining_days > 3:
        stats_text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 3 –∏–∑ {remaining_days} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def generate_plan_command(update, context):
    """Handler for the /plan command."""
    user_id = update.message.from_user.id
    db_manager = DBManager()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
    runner_profile = db_manager.get_runner_profile(user_id)
    if not runner_profile:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
        ])
        await update.message.reply_text(
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞.",
            reply_markup=keyboard
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    current_plan = db_manager.get_current_plan(user_id)
    if current_plan:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data=f"view_plan_{current_plan['id']}")],
            [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")]
        ])
        await update.message.reply_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {current_plan['plan_name']}.\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=keyboard
        )
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –Ω–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
        openai_service = OpenAIService()
        training_plan = openai_service.generate_training_plan(runner_profile)
        
        if not training_plan:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        training_manager = TrainingPlanManager(user_id)
        plan_id = training_manager.save_training_plan(training_plan)
        
        if not plan_id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{plan_id}")]
        ])
        
        await update.message.reply_text(
            f"‚úÖ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"{training_plan['plan_name']}\n\n"
            f"{training_plan['plan_description']}",
            reply_markup=keyboard
        )
    
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def callback_query_handler(update, context):
    """Handler for inline button callbacks."""
    query = update.callback_query
    await query.answer()  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ callback
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    
    if callback_data == "create_profile":
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_handler = RunnerProfileConversation()
        await profile_handler.start(update, context)
    
    elif callback_data == "new_plan":
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        user_id = query.from_user.id
        
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
            db_manager = DBManager()
            runner_profile = db_manager.get_runner_profile(user_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
            openai_service = OpenAIService()
            training_plan = openai_service.generate_training_plan(runner_profile)
            
            if not training_plan:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            training_manager = TrainingPlanManager(user_id)
            plan_id = training_manager.save_training_plan(training_plan)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{plan_id}")]
            ])
            
            await query.message.reply_text(
                f"‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"{training_plan['plan_name']}\n\n"
                f"{training_plan['plan_description']}",
                reply_markup=keyboard
            )
        
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    elif callback_data.startswith("view_plan_"):
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        plan_id = int(callback_data.split("_")[2])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
        training_manager = TrainingPlanManager(user_id)
        plan_data = training_manager.get_training_plan(plan_id)
        
        if not plan_data or 'plan_data' not in plan_data or 'training_days' not in plan_data['plan_data']:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω."
            )
            return
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        await query.message.reply_text(
            f"*{plan_data['plan_name']}*\n\n"
            f"{plan_data['plan_description']}",
            parse_mode='Markdown'
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        days_to_show = min(3, len(plan_data['plan_data']['training_days']))
        
        for i in range(days_to_show):
            day_num = i + 1
            day = plan_data['plan_data']['training_days'][i]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            status = training_manager.get_training_status(plan_id, day_num)
            status_emoji = ""
            
            if status == 'completed':
                status_emoji = "‚úÖ "
            elif status == 'canceled':
                status_emoji = "‚ùå "
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            formatted_day = f"{status_emoji}{format_training_day(day, day_num)}"
            
            # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            if not status:
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_training_{plan_id}_{day_num}"),
                        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"cancel_training_{plan_id}_{day_num}")
                    ]
                ])
                
                await query.message.reply_text(formatted_day, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await query.message.reply_text(formatted_day, parse_mode='Markdown')
        
        # –ï—Å–ª–∏ –¥–Ω–µ–π –±–æ–ª—å—à–µ 3, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if len(plan_data['plan_data']['training_days']) > 3:
            total_days = len(plan_data['plan_data']['training_days'])
            await query.message.reply_text(
                f"–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ {days_to_show} –∏–∑ {total_days} –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n"
                f"–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pending."
            )
    
    elif callback_data.startswith("complete_training_"):
        # –û—Ç–º–µ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        parts = callback_data.split("_")
        plan_id = int(parts[2])
        day_num = int(parts[3])
        user_id = query.from_user.id
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        training_manager = TrainingPlanManager(user_id)
        success = training_manager.mark_training_completed(plan_id, day_num)
        
        if success:
            await query.message.reply_text(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ #{day_num} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                plan_data = training_manager.get_training_plan(plan_id)
                if plan_data and 'plan_data' in plan_data and 'training_days' in plan_data['plan_data']:
                    if day_num <= len(plan_data['plan_data']['training_days']):
                        day = plan_data['plan_data']['training_days'][day_num - 1]
                        formatted_day = f"‚úÖ {format_training_day(day, day_num)}"
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await query.message.edit_text(formatted_day, parse_mode='Markdown')
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif callback_data.startswith("cancel_training_"):
        # –û—Ç–º–µ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π
        parts = callback_data.split("_")
        plan_id = int(parts[2])
        day_num = int(parts[3])
        user_id = query.from_user.id
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
        training_manager = TrainingPlanManager(user_id)
        success = training_manager.mark_training_canceled(plan_id, day_num)
        
        if success:
            await query.message.reply_text(f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ #{day_num} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –æ—Ç–º–µ–Ω—ã
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                plan_data = training_manager.get_training_plan(plan_id)
                if plan_data and 'plan_data' in plan_data and 'training_days' in plan_data['plan_data']:
                    if day_num <= len(plan_data['plan_data']['training_days']):
                        day = plan_data['plan_data']['training_days'][day_num - 1]
                        formatted_day = f"‚ùå {format_training_day(day, day_num)}"
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await query.message.edit_text(formatted_day, parse_mode='Markdown')
                        except Exception as e:
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            except Exception as e:
                logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def setup_bot():
    """Configure and return the bot application."""
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    create_tables()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plan", generate_plan_command))
    application.add_handler(CommandHandler("pending", pending_trainings_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
    profile_handler = RunnerProfileConversation()
    application.add_handler(profile_handler.get_conversation_handler())
    
    return application