import os
import json
import io
from datetime import datetime, timedelta
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from config import TELEGRAM_TOKEN, logging
from models import create_tables
from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from openai_service import OpenAIService
from conversation import RunnerProfileConversation
from image_analyzer import ImageAnalyzer


def format_weekly_volume(volume, default_value="0"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –±–µ–≥–∞, –∏–∑–±–µ–≥–∞—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è None.
    
    Args:
        volume: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ None –∏–ª–∏ "None"
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–±—ä–µ–º–æ–º –±–µ–≥–∞
    """
    if volume is None or volume == "None" or not volume:
        return f"{default_value} –∫–º/–Ω–µ–¥–µ–ª—é"
    
    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(volume, str) and ("–∫–º/–Ω–µ–¥–µ–ª—é" in volume or "–∫–º" in volume):
        return volume
    
    # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    return f"{volume} –∫–º/–Ω–µ–¥–µ–ª—é"

async def help_command(update, context):
    """Handler for the /help command."""
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ—Ç—ã —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤
    from datetime import datetime, timedelta
    import pytz
    
    # –ü–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    utc_now = datetime.now(pytz.UTC)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_now = utc_now.astimezone(moscow_tz)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC): {utc_now.strftime('%d.%m.%Y %H:%M:%S')}")
    logging.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {moscow_now.strftime('%d.%m.%Y %H:%M:%S')}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 7 –¥–Ω–µ–π
    dates = []
    for i in range(7):
        date = moscow_now + timedelta(days=i)
        dates.append(date.strftime("%d.%m.%Y"))
    
    logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ç—Ä–µ–π–Ω–∏–Ω–≥–æ–≤: {dates}")
    
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–≥—É–Ω–æ–≤. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
        "/plan - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/pending - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
        "üì± –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (Nike Run, Strava, Garmin –∏ –¥—Ä.), "
        "–∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –∑–∞—á—Ç—É –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan\n\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–ú–æ—Å–∫–≤–∞): {moscow_now.strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"–î–∞—Ç—ã –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {', '.join(dates[:3])}..."
    )
    await update.message.reply_text(help_text)

async def pending_trainings_command(update, context):
    """Handler for the /pending command - shows only pending (not completed) trainings."""
    try:
        # Get user ID from database
        telegram_id = update.effective_user.id
        db_user_id = DBManager.get_user_id(telegram_id)
        
        if not db_user_id:
            # User not found, prompt to start a conversation
            await update.message.reply_text(
                "‚ö†Ô∏è –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π'."
            )
            return
        
        # Get latest training plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        if not plan:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return
        
        # Get completed and canceled trainings
        plan_id = plan['id']
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days
        
        # Send plan overview
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Send only not completed or canceled training days
        has_pending_trainings = False
        for idx, day in enumerate(plan['plan_data']['training_days']):
            training_day_num = idx + 1
            
            # Skip completed and canceled training days
            if training_day_num in processed_days:
                continue
                
            has_pending_trainings = True
            
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            
            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])
            
            await update.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
        # If all trainings are completed or canceled, show a congratulation message with continue button
        if not has_pending_trainings:
            # Calculate total completed distance
            total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
            
            # Add total distance to user profile
            new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)
            
            # Format the weekly volume
            formatted_volume = format_weekly_volume(new_volume, str(total_distance))
            
            # Create continue button
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
            ])
            
            await update.message.reply_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {formatted_volume}.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                reply_markup=keyboard
            )
    
    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def generate_plan_command(update, context):
    """Handler for the /plan command."""
    try:
        # Get user ID from database
        telegram_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        
        # Try to add/update user and get the ID
        db_user_id = DBManager.add_user(telegram_id, username, first_name, last_name)
        
        if not db_user_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # Check if user has a runner profile
        profile = DBManager.get_runner_profile(db_user_id)
        
        if not profile:
            # User doesn't have a profile yet, suggest to create one
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ /plan"
            )
            return
        
        # Check if user already has a training plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        
        if plan:
            # User already has a plan, ask if they want to view it or create a new one
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data="view_plan")],
                [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")]
            ])
            
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=keyboard
            )
            return
        
        # Generate new training plan
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # Get OpenAI service and generate plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)
        
        # Save the plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
        
        if not plan_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Send plan overview with info about screenshot uploads
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}\n\n"
            f"üì± –°–æ–≤–µ—Ç: –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ "
            f"(Nike Run, Strava, Garmin –∏ –¥—Ä.), –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã "
            f"–∏ –∑–∞—á—Ç—É –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
            parse_mode='Markdown'
        )
        
        # Send each training day with action buttons
        for idx, day in enumerate(plan['training_days']):
            training_day_num = idx + 1
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            
            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])
            
            await update.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def callback_query_handler(update, context):
    """Handler for inline button callbacks."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    db_user_id = DBManager.get_user_id(telegram_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if query.data.startswith('complete_'):
        # –§–æ—Ä–º–∞—Ç: complete_PLAN_ID_DAY_NUMBER
        try:
            _, plan_id, day_number = query.data.split('_')
            plan_id = int(plan_id)
            day_number = int(day_number)
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            success = TrainingPlanManager.mark_training_completed(db_user_id, plan_id, day_number)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                if not plan:
                    await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                day_idx = day_number - 1
                if day_idx < 0 or day_idx >= len(plan['plan_data']['training_days']):
                    await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                    return
                
                day = plan['plan_data']['training_days'][day_idx]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                day_message = (
                    f"‚úÖ *–î–µ–Ω—å {day_number}: {day['day']} ({day['date']})* - –í–´–ü–û–õ–ù–ï–ù–û\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    await query.message.edit_text(day_message, parse_mode='Markdown')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å {day_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
                processed_days = completed_days + canceled_days
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–ª–∞–Ω–µ
                total_days = len(plan['plan_data']['training_days'])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                has_pending_trainings = any(day_num not in processed_days for day_num in range(1, total_days + 1))
                
                # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not has_pending_trainings:
                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –±–µ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    formatted_volume = format_weekly_volume(new_volume, str(total_distance))
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await query.message.reply_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                        f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {formatted_volume}.\n\n"
                        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                        reply_markup=keyboard
                    )
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")
                
        except Exception as e:
            logging.error(f"Error marking training as completed: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    elif query.data.startswith('cancel_'):
        # –§–æ—Ä–º–∞—Ç: cancel_PLAN_ID_DAY_NUMBER
        try:
            _, plan_id, day_number = query.data.split('_')
            plan_id = int(plan_id)
            day_number = int(day_number)
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
            success = TrainingPlanManager.mark_training_canceled(db_user_id, plan_id, day_number)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                if not plan:
                    await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                day_idx = day_number - 1
                if day_idx < 0 or day_idx >= len(plan['plan_data']['training_days']):
                    await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                    return
                
                day = plan['plan_data']['training_days'][day_idx]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ–± –æ—Ç–º–µ–Ω–µ
                day_message = (
                    f"‚ùå *–î–µ–Ω—å {day_number}: {day['day']} ({day['date']})* - –û–¢–ú–ï–ù–ï–ù–û\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    await query.message.edit_text(day_message, parse_mode='Markdown')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å {day_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è!"
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
                processed_days = completed_days + canceled_days
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–ª–∞–Ω–µ
                total_days = len(plan['plan_data']['training_days'])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                has_pending_trainings = any(day_num not in processed_days for day_num in range(1, total_days + 1))
                
                # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not has_pending_trainings:
                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞ –±–µ–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    formatted_volume = format_weekly_volume(new_volume, str(total_distance))
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                    ])
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await query.message.reply_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                        f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {formatted_volume}.\n\n"
                        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                        reply_markup=keyboard
                    )
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é.")
                
        except Exception as e:
            logging.error(f"Error marking training as canceled: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω"
    elif query.data == "view_plan":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            
            if not plan:
                await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            plan_id = plan['id']
            completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
            canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
                f"*{plan['plan_name']}*\n\n"
                f"{plan['plan_description']}",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ
            training_days = []
            if 'training_days' in plan:
                training_days = plan['training_days']
            elif 'plan_data' in plan and isinstance(plan['plan_data'], dict) and 'training_days' in plan['plan_data']:
                training_days = plan['plan_data']['training_days']
            
            logging.info(f"–ü–ª–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {db_user_id}, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {plan.keys()}")
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {len(training_days)}")
            
            for idx, day in enumerate(training_days):
                training_day_num = idx + 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
                day_completed = training_day_num in completed_days
                day_canceled = training_day_num in canceled_days
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if day_completed:
                    day_message = (
                        f"‚úÖ *–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})* - –í–´–ü–û–õ–ù–ï–ù–û\n"
                        f"–¢–∏–ø: {day['training_type']}\n"
                        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                        f"–¢–µ–º–ø: {day['pace']}\n\n"
                        f"{day['description']}"
                    )
                    await query.message.reply_text(day_message, parse_mode='Markdown')
                elif day_canceled:
                    day_message = (
                        f"‚ùå *–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})* - –û–¢–ú–ï–ù–ï–ù–û\n"
                        f"–¢–∏–ø: {day['training_type']}\n"
                        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                        f"–¢–µ–º–ø: {day['pace']}\n\n"
                        f"{day['description']}"
                    )
                    await query.message.reply_text(day_message, parse_mode='Markdown')
                else:
                    day_message = (
                        f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                        f"–¢–∏–ø: {day['training_type']}\n"
                        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                        f"–¢–µ–º–ø: {day['pace']}\n\n"
                        f"{day['description']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
                    ])
                    
                    await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logging.error(f"Error viewing training plan: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω"
    elif query.data == "new_plan":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = DBManager.get_runner_profile(db_user_id)
            
            if not profile:
                # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await query.message.reply_text(
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å. "
                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                )
                
                # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
                conversation = RunnerProfileConversation()
                conversation_handler = conversation.get_conversation_handler()
                context.application.add_handler(conversation_handler)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥
                await conversation.start(update, context)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            
            if not current_plan:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Å –Ω—É–ª—è
                with open("attached_assets/–∫–æ—Ç–∏–∫.jpeg", "rb") as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption="‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n\n–ú–æ–π –∫–æ—Ç–∏–∫ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ! üê±üí™"
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å OpenAI –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
                openai_service = OpenAIService()
                plan = openai_service.generate_training_plan(profile)
            else:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
                plan_id = current_plan['id']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                completed_trainings = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                
                # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id) 
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logging.info(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_distance:.1f} –∫–º")
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π
                if total_distance <= 0:
                    # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º —Ä–∞—Å—á–µ—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–ª–∞–Ω–∞
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞
                        completed_training_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                        
                        recalculated_distance = 0
                        for day_num in completed_training_days:
                            day_idx = day_num - 1
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞
                            training_days = []
                            if 'training_days' in current_plan:
                                training_days = current_plan['training_days']
                            elif 'plan_data' in current_plan and isinstance(current_plan['plan_data'], dict) and 'training_days' in current_plan['plan_data']:
                                training_days = current_plan['plan_data']['training_days']
                            
                            if day_idx < 0 or day_idx >= len(training_days):
                                continue
                            
                            day_data = training_days[day_idx]
                            distance_str = day_data.get('distance', '0 –∫–º').split()[0]
                            try:
                                distance = float(distance_str)
                                recalculated_distance += distance
                            except (ValueError, TypeError):
                                pass
                        
                        if recalculated_distance > 0:
                            total_distance = recalculated_distance
                            logging.info(f"–ü–µ—Ä–µ—Å—á–∏—Ç–∞–ª–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é: {total_distance:.1f} –∫–º")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏: {e}")
                
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
                progress_display = f" —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ({total_distance:.1f} –∫–º)"
                if total_distance <= 0:
                    progress_display = ""
                
                with open("attached_assets/–∫–æ—Ç–∏–∫.jpeg", "rb") as photo:
                    await query.message.reply_photo(
                        photo=photo,
                        caption=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫{progress_display}. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n\n–ú–æ–π –∫–æ—Ç–∏–∫ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ! üê±üí™"
                    )
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å OpenAI –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
                openai_service = OpenAIService()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∞
                plan_data_for_api = current_plan
                if 'plan_data' in current_plan and isinstance(current_plan['plan_data'], dict):
                    plan_data_for_api = current_plan['plan_data']
                
                plan = openai_service.generate_training_plan_continuation(profile, total_distance, plan_data_for_api)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
            
            if not plan_id:
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
                f"*{plan['plan_name']}*\n\n"
                f"{plan['plan_description']}",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            for idx, day in enumerate(plan['training_days']):
                training_day_num = idx + 1
                day_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
                ])
                
                await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
                
        except Exception as e:
            logging.error(f"Error creating new training plan: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    elif query.data == "generate_plan":
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_id = update.effective_user.id
            username = update.effective_user.username
            first_name = update.effective_user.first_name
            last_name = update.effective_user.last_name
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å ID
            db_user_id = DBManager.add_user(telegram_id, username, first_name, last_name)
            
            if not db_user_id:
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
            profile = DBManager.get_runner_profile(db_user_id)
            
            if not profile:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
                await query.message.reply_text(
                    "‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ /plan"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            
            if plan:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data="view_plan")],
                    [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")]
                ])
                
                await query.message.reply_text(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                    reply_markup=keyboard
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º
            with open("attached_assets/–∫–æ—Ç–∏–∫.jpeg", "rb") as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption="‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n\n–ú–æ–π –∫–æ—Ç–∏–∫ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ! üê±üí™"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å OpenAI –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            openai_service = OpenAIService()
            plan = openai_service.generate_training_plan(profile)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
            
            if not plan_id:
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
                f"*{plan['plan_name']}*\n\n"
                f"{plan['plan_description']}",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            for idx, day in enumerate(plan['training_days']):
                training_day_num = idx + 1
                day_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
                ])
                
                await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
                
        except Exception as e:
            logging.error(f"Error generating plan from button: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –¥–Ω–µ–π" –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    elif query.data == "none_match":
        try:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            await query.message.reply_text(
                "üëç –ü–æ–Ω—è—Ç–Ω–æ! –Ø –æ—Ç–º–µ—á—É —ç—Ç–æ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤–Ω–µ –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞.\n\n"
                "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
            )
        except Exception as e:
            logging.error(f"Error handling none_match button: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞
    elif query.data.startswith("adjust_plan_"):
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback data: adjust_plan_{plan_id}_{day_num}_{actual_distance}_{planned_distance}
            parts = query.data.split('_')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ —Ñ–æ—Ä–º–∞—Ç
            if len(parts) < 6:
                await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–ª–∞–Ω–∞.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            plan_id = int(parts[2])
            day_num = int(parts[3])
            actual_distance = float(parts[4])
            planned_distance = float(parts[5])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
            runner_profile = DBManager.get_runner_profile(db_user_id)
            if not runner_profile:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
            current_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            if not current_plan or current_plan['id'] != plan_id:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            await query.message.reply_text(
                "üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é –≤–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å OpenAI —Å–µ—Ä–≤–∏—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω
            openai_service = OpenAIService()
            adjusted_plan = openai_service.adjust_training_plan(
                runner_profile,
                current_plan['plan_data'],
                day_num,
                planned_distance,
                actual_distance
            )
            
            if not adjusted_plan:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = TrainingPlanManager.update_training_plan(db_user_id, plan_id, adjusted_plan)
            
            if not success:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
            updated_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"*{updated_plan['plan_data']['plan_name']}*\n\n"
                f"{updated_plan['plan_data']['plan_description']}\n\n"
                f"üìã –í–æ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –≤–∞—à–µ–≥–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:",
                parse_mode='Markdown'
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            completed = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
            canceled = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ) –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            for idx, day in enumerate(updated_plan['plan_data']['training_days']):
                training_day_num = idx + 1
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–Ω–∏
                if training_day_num in completed or training_day_num in canceled:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                training_type = day.get('training_type') or day.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
                day_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {training_type}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
                ])
                
                await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
        except Exception as e:
            logging.error(f"Error adjusting plan: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –ø–ª–∞–Ω–∞.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    elif query.data.startswith('continue_plan_'):
        # –§–æ—Ä–º–∞—Ç: continue_plan_PLAN_ID
        try:
            _, _, plan_id = query.data.split('_')
            plan_id = int(plan_id)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_id = update.effective_user.id
            username = update.effective_user.username
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {telegram_id}), db_user_id: {db_user_id}")
            logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–ª–∞–Ω {plan_id}")
            
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –µ–≥–æ
            profile = DBManager.get_runner_profile(db_user_id)
            
            if not profile:
                logging.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {telegram_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∏—Ç—å db_user_id
                db_user_id_check = DBManager.get_user_id(telegram_id)
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ db_user_id: {db_user_id_check}")
                
                if db_user_id_check and db_user_id_check != db_user_id:
                    db_user_id = db_user_id_check
                    profile = DBManager.get_runner_profile(db_user_id)
                    
                # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –≤—Å—ë –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not profile:
                    logging.info(f"Creating default profile for user: {username} (ID: {telegram_id})")
                    try:
                        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        profile = DBManager.create_default_runner_profile(db_user_id)
                        
                        if profile:
                            logging.info(f"Default profile created successfully for {username}")
                            await query.message.reply_text(
                                "‚ö†Ô∏è –ù–∞–º –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –º—ã —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è –≤–∞—Å –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å, "
                                "—á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
                                "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /plan"
                            )
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
                            logging.warning(f"Failed to create default profile for {username}")
                            await query.message.reply_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ü–æ—Ö–æ–∂–µ, –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±—ã–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã.\n\n"
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /plan"
                            )
                            return
                    except Exception as e:
                        logging.error(f"Error creating default profile: {e}")
                        await query.message.reply_text(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /plan"
                        )
                        return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
            current_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            if not current_plan or current_plan['id'] != plan_id:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return
            
            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
            
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
            with open("attached_assets/–∫–æ—Ç–∏–∫.jpeg", "rb") as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ({total_distance:.1f} –∫–º). –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n\n–ú–æ–π –∫–æ—Ç–∏–∫ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ! üê±üí™"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å OpenAI –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
            openai_service = OpenAIService()
            new_plan = openai_service.generate_training_plan_continuation(profile, total_distance, current_plan['plan_data'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            new_plan_id = TrainingPlanManager.save_training_plan(db_user_id, new_plan)
            
            if not new_plan_id:
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
                f"*{new_plan['plan_name']}*\n\n"
                f"{new_plan['plan_description']}",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            for idx, day in enumerate(new_plan['training_days']):
                training_day_num = idx + 1
                day_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{new_plan_id}_{training_day_num}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{new_plan_id}_{training_day_num}")]
                ])
                
                await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
                
        except Exception as e:
            logging.error(f"Error continuing training plan: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
            
async def handle_photo(update, context):
    """Handler for photo messages to analyze workout screenshots."""
    try:
        # Get user information
        telegram_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        first_name = update.effective_user.first_name or "Unknown"
        
        # Log the photo reception
        logging.info(f"Received photo from {username} (ID: {telegram_id})")
        
        # Check if user exists in database
        db_user_id = DBManager.get_user_id(telegram_id)
        if not db_user_id:
            # User not found, prompt to create a profile
            await update.message.reply_text(
                "‚ö†Ô∏è –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return
        
        # Check if user has an active training plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        if not plan:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return
        
        # Send processing message
        processing_message = await update.message.reply_text(
            "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # Get photo with best quality
        photo = update.message.photo[-1]
        
        # Download the photo
        photo_file = await context.bot.get_file(photo.file_id)
        photo_bytes = await photo_file.download_as_bytearray()
        
        # Analyze the screenshot
        analyzer = ImageAnalyzer()
        workout_data = analyzer.analyze_workout_screenshot(photo_bytes)
        
        # Log the analysis results
        logging.info(f"Workout data analysis: {workout_data}")
        
        # Check if analysis was successful
        if 'error' in workout_data:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {workout_data['error']}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
        
        # Get training plan data
        plan_id = plan['id']
        training_days = plan['plan_data']['training_days']
        
        # Get processed training days
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days
           
        # Check if this is a running workout or another type of workout
        workout_type = workout_data.get("—Ç–∏–ø_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "").lower()
        
        # Check common running workout types in Russian and English
        running_types = ["–±–µ–≥", "–ø—Ä–æ–±–µ–∂–∫–∞", "run", "running", "jogging", "–±–µ–≥ —Ç—Ä—É—Å—Ü–æ–π"]
        is_running_workout = any(run_type in workout_type for run_type in running_types) if workout_type else True
        
        if workout_type and not is_running_workout:
            # Create buttons for marking training as completed manually
            buttons = []
            for idx, day in enumerate(training_days):
                day_num = idx + 1
                if day_num not in processed_days:
                    buttons.append([InlineKeyboardButton(
                        f"–î–µ–Ω—å {day_num}: {day['day']} ({day['date']}) - {day['distance']}",
                        callback_data=f"complete_{plan_id}_{day_num}"
                    )])
                    
            # Only add buttons if we have some unprocessed days
            if buttons:
                keyboard = InlineKeyboardMarkup(buttons)
                
                await update.message.reply_text(
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–∏–ø–∞ *{workout_type}*!\n\n"
                    f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–µ–≥–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
                    f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Å–∏–ª–æ–≤—ã–µ –∏ —Ç.–¥.) "
                    f"–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –±–µ–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, "
                    f"–∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π:",
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            else:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–∏–ø–∞ *{workout_type}*!\n\n"
                    f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–µ–≥–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
                    f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–ø–ª–∞–≤–∞–Ω–∏–µ, –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Å–∏–ª–æ–≤—ã–µ –∏ —Ç.–¥.) "
                    f"–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –±–µ–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
                    parse_mode='Markdown'
                )
            return
        
        # Find a matching training day
        matching_day_idx, matching_score = analyzer.find_matching_training(training_days, workout_data)
        
        # Extract workout details for display
        workout_date = workout_data.get("–¥–∞—Ç–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        workout_distance = workout_data.get("–¥–∏—Å—Ç–∞–Ω—Ü–∏—è_–∫–º", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        workout_time = workout_data.get("–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        workout_pace = workout_data.get("—Ç–µ–º–ø", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        workout_app = workout_data.get("–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # Create acknowledgment message
        ack_message = (
            f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–î–∞—Ç–∞: *{workout_date}*\n"
            f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: *{workout_distance} –∫–º*\n"
            f"–í—Ä–µ–º—è: *{workout_time}*\n"
            f"–¢–µ–º–ø: *{workout_pace}*\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: *{workout_app}*\n\n"
        )
        
        # If we found a matching training day
        if matching_day_idx is not None and matching_score >= 5:
            # Get the matched training day number (1-based index)
            matched_day_num = matching_day_idx + 1
            matched_day = training_days[matching_day_idx]
            
            # Check if this training day is already processed
            if matched_day_num in processed_days:
                await update.message.reply_text(
                    f"{ack_message}‚ö†Ô∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞ *{matched_day['date']}* —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è.",
                    parse_mode='Markdown'
                )
                return
            
            # Mark training as completed
            success = TrainingPlanManager.mark_training_completed(db_user_id, plan_id, matched_day_num)
            
            if success:
                # Update weekly volume in profile (add completed distance)
                try:
                    distance_km = float(workout_distance)
                    DBManager.update_weekly_volume(db_user_id, distance_km)
                except (ValueError, TypeError):
                    logging.warning(f"Could not update weekly volume with distance: {workout_distance}")
                
                # Extract planned distance
                planned_distance = 0
                try:
                    # Extract numeric value from distance string (e.g., "5 –∫–º" -> 5)
                    import re
                    distance_match = re.search(r'(\d+(\.\d+)?)', matched_day['distance'])
                    if distance_match:
                        planned_distance = float(distance_match.group(1))
                except Exception as e:
                    logging.warning(f"Error extracting planned distance: {e}")
                
                # Check if actual distance significantly differs from planned distance
                actual_distance = float(workout_distance)
                diff_percent = 0
                if planned_distance > 0:
                    diff_percent = abs(actual_distance - planned_distance) / planned_distance * 100
                
                # Create the acknowledgment message
                training_completion_msg = (
                    f"{ack_message}üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å –ø–ª–∞–Ω–æ–º!\n\n"
                    f"–î–µ–Ω—å {matched_day_num}: {matched_day['day']} ({matched_day['date']})\n"
                    f"–¢–∏–ø: {matched_day['training_type']}\n"
                    f"–ü–ª–∞–Ω–æ–≤–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {matched_day['distance']}\n"
                    f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {workout_distance} –∫–º\n\n"
                )
                
                # If difference is more than 20%
                if diff_percent > 20 and training_days and len(training_days) > matched_day_num:
                    # Add a message about the significant difference
                    if actual_distance > planned_distance:
                        training_completion_msg += (
                            f"‚ö†Ô∏è –í–∞—à–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞ {diff_percent:.1f}% –±–æ–ª—å—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π!\n"
                            f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–µ–Ω –¥–ª—è –≤–∞—Å.\n\n"
                        )
                    else:
                        training_completion_msg += (
                            f"‚ö†Ô∏è –í–∞—à–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞ {diff_percent:.1f}% –º–µ–Ω—å—à–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π!\n"
                            f"–≠—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —Å–ª–∏—à–∫–æ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–µ–Ω –¥–ª—è –≤–∞—Å.\n\n"
                        )
                    
                    # Offer to adjust the plan
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìù –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω", callback_data=f"adjust_plan_{plan_id}_{matched_day_num}_{actual_distance}_{planned_distance}")]
                    ])
                    
                    training_completion_msg += "–•–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?"
                    
                    await update.message.reply_text(
                        training_completion_msg,
                        parse_mode='Markdown',
                        reply_markup=keyboard
                    )
                else:
                    # No significant difference or no remaining days
                    training_completion_msg += f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üëç"
                    
                    await update.message.reply_text(
                        training_completion_msg,
                        parse_mode='Markdown'
                    )
                
                # Check if all trainings are now completed
                all_processed_days = TrainingPlanManager.get_all_processed_trainings(db_user_id, plan_id)
                if len(all_processed_days) == len(training_days):
                    # Calculate total completed distance
                    total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
                    
                    # Create continue button
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                    ])
                    
                    await update.message.reply_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                        f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º.\n\n"
                        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                        reply_markup=keyboard
                    )
            else:
                await update.message.reply_text(
                    f"{ack_message}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /pending.",
                    parse_mode='Markdown'
                )
        else:
            # No matching training day found
            # Create inline buttons for all unprocessed training days
            buttons = []
            for idx, day in enumerate(training_days):
                day_num = idx + 1
                if day_num not in processed_days:
                    buttons.append([InlineKeyboardButton(
                        f"–î–µ–Ω—å {day_num}: {day['day']} ({day['date']}) - {day['distance']}",
                        callback_data=f"complete_{plan_id}_{day_num}"
                    )])
            
            # Add a "None of these" button
            buttons.append([InlineKeyboardButton("‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –¥–Ω–µ–π", callback_data="none_match")])
            
            keyboard = InlineKeyboardMarkup(buttons)
            
            await update.message.reply_text(
                f"{ack_message}‚ùì –Ø –Ω–µ —Å–º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –≤–∞—à–∏–º –ø–ª–∞–Ω–æ–º.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–∏ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –¥–Ω–µ–π', "
                f"–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤–Ω–µ –ø–ª–∞–Ω–∞:",
                parse_mode='Markdown',
                reply_markup=keyboard
            )
            
    except Exception as e:
        logging.error(f"Error handling photo: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ /pending."
        )


def setup_bot():
    """Configure and return the bot application."""
    # Create the Application object
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # Create database tables if they don't exist
    create_tables()
    
    # Add command handlers
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plan", generate_plan_command))
    application.add_handler(CommandHandler("pending", pending_trainings_command))
    
    # Add conversation handler for profile creation
    conversation = RunnerProfileConversation()
    application.add_handler(conversation.get_conversation_handler())
    
    # Add photo handler for analyzing workout screenshots
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # Add text message handler for button responses
    async def text_message_handler(update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = update.message.text.strip()
        user = update.effective_user
        telegram_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db_user_id = DBManager.get_user_id(telegram_id)
        
        if not db_user_id:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º."
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∫–Ω–æ–ø–æ–∫
        if text == "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω":
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–ª–∞–Ω–∞
            plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
            
            if not plan:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /plan"
                )
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            completed = TrainingPlanManager.get_completed_trainings(db_user_id, plan['id'])
            canceled = TrainingPlanManager.get_canceled_trainings(db_user_id, plan['id'])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω
            await update.message.reply_text(
                f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
                f"*{plan['plan_name']}*\n\n"
                f"{plan['plan_description']}",
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            for idx, day in enumerate(plan['plan_data']['training_days']):
                training_day_num = idx + 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = ""
                if training_day_num in completed:
                    status = "‚úÖ "
                elif training_day_num in canceled:
                    status = "‚ùå "
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ —Å —Ç–∏–ø–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å 'type' –∏–ª–∏ 'training_type')
                training_type = day.get('training_type') or day.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
                training_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {training_type}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                if training_day_num not in completed and training_day_num not in canceled:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", 
                                            callback_data=f"complete_{plan['id']}_{training_day_num}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                                            callback_data=f"cancel_{plan['id']}_{training_day_num}")]
                    ])
                    
                    await update.message.reply_text(
                        f"{status}{training_message}",
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        f"{status}{training_message}",
                        parse_mode='Markdown'
                    )
                
        elif text == "üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º
            with open("attached_assets/–∫–æ—Ç–∏–∫.jpeg", "rb") as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption="‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...\n\n–ú–æ–π –∫–æ—Ç–∏–∫ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –∫ –ª—é–±–æ–π –∑–∞–¥–∞—á–µ! üê±üí™"
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                profile = DBManager.get_runner_profile(db_user_id)
                
                if not profile:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ."
                    )
                    return
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å OpenAI
                openai_service = OpenAIService()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
                plan = openai_service.generate_training_plan(profile)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î
                plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
                
                if not plan_id:
                    await update.message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
                saved_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(
                    f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
                    f"*{saved_plan['plan_name']}*\n\n"
                    f"{saved_plan['plan_description']}",
                    parse_mode='Markdown'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–ª–∞–Ω–∞
                training_days = []
                if 'training_days' in saved_plan:
                    training_days = saved_plan['training_days']
                elif 'plan_data' in saved_plan and isinstance(saved_plan['plan_data'], dict) and 'training_days' in saved_plan['plan_data']:
                    training_days = saved_plan['plan_data']['training_days']
                else:
                    logging.error(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω–∞: {saved_plan.keys()}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                for idx, day in enumerate(training_days):
                    training_day_num = idx + 1
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ —Å —Ç–∏–ø–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å 'type' –∏–ª–∏ 'training_type')
                    training_type = day.get('training_type') or day.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    
                    training_message = (
                        f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                        f"–¢–∏–ø: {training_type}\n"
                        f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                        f"–¢–µ–º–ø: {day['pace']}\n\n"
                        f"{day['description']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", 
                                             callback_data=f"complete_{saved_plan['id']}_{training_day_num}")],
                        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                                             callback_data=f"cancel_{saved_plan['id']}_{training_day_num}")]
                    ])
                    
                    await update.message.reply_text(
                        training_message,
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        elif text == "‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            await update.message.reply_text(
                "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ."
            )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))
    
    # Add callback query handler for inline buttons
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    return application