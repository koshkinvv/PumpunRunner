import os
import json
import io
from datetime import datetime, timedelta
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É ConversationHandler.END
END = ConversationHandler.END
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

from config import TELEGRAM_TOKEN, logging, STATES
from models import create_tables
from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from openai_service import OpenAIService
from conversation import RunnerProfileConversation
from image_analyzer import ImageAnalyzer

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
from improved_training_format import format_training_day as improved_format_training_day

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
def format_training_day(day, training_day_num):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è improved_training_format.
    
    Args:
        day: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –¥–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        training_day_num: –ù–æ–º–µ—Ä –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    return improved_format_training_day(day, training_day_num)


def format_weekly_volume(volume, default_value="0"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –±–µ–≥–∞, –∏–∑–±–µ–≥–∞—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è None.
    
    Args:
        volume: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ None –∏–ª–∏ "None"
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–±—ä–µ–º–æ–º –±–µ–≥–∞
    """
    # –ï—Å–ª–∏ volume —Ä–∞–≤–µ–Ω None –∏–ª–∏ —Å—Ç—Ä–æ–∫–µ "None", –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if volume is None or volume == "None":
        return f"{default_value} –∫–º/–Ω–µ–¥–µ–ª—é"
    
    # –ï—Å–ª–∏ volume —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(volume, str) and "–∫–º" in volume:
        return volume
    
    # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    return f"{volume} –∫–º/–Ω–µ–¥–µ–ª—é"


async def send_main_menu(update, context, message_text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–∏–ª–µ ReplyKeyboardMarkup –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
    keyboard = ReplyKeyboardMarkup([
        ["üìã –ú–æ–π –ø–ª–∞–Ω", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üëü –û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(message_text, reply_markup=keyboard)


async def help_command(update, context):
    """Handler for the /help command."""
    help_text = """
*RunTracker Bot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–µ–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä*

–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å.

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/plan - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
/pending - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
/update - –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
2. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
3. –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å

*–î–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–∏—à–∏—Ç–µ @run_coach_support*
    """
    
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def pending_trainings_command(update, context):
    """Handler for the /pending command - shows only pending (not completed) trainings."""
    user_id = update.message.from_user.id
    db_manager = DBManager()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_plan = db_manager.get_current_plan(user_id)
    
    if not current_plan:
        await update.message.reply_text(
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø–ª–∞–Ω–∞
    training_manager = TrainingPlanManager(user_id)
    plan_data = training_manager.get_training_plan(current_plan['id'])
    
    if not plan_data or 'plan_data' not in plan_data or 'training_days' not in plan_data['plan_data']:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω —á–µ—Ä–µ–∑ /plan."
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (–Ω–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∫–∞–∫ completed –∏–ª–∏ canceled) —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    pending_days = []
    completed_days = []
    canceled_days = []
    
    for i, day in enumerate(plan_data['plan_data']['training_days'], 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        status = training_manager.get_training_status(current_plan['id'], i)
        
        if status == 'completed':
            completed_days.append((i, day))
        elif status == 'canceled':
            canceled_days.append((i, day))
        else:
            pending_days.append((i, day))
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not pending_days:
        # –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
        if completed_days or canceled_days:
            message = f"üéâ *–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_days)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
            message += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {len(canceled_days)} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
            message += "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ /plan –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –ø–ª–∞–Ω–æ–º."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{current_plan['id']}")]
            ])
            
            await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await update.message.reply_text(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /plan, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω."
            )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    pending_to_show = pending_days[:3]
    
    message = f"*–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n"
    
    for i, day in pending_to_show:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        day_info = format_training_day(day, i)
        message += f"{day_info}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_training_{current_plan['id']}_{i}"),
                InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"cancel_training_{current_plan['id']}_{i}")
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        message = ""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_count = len(plan_data['plan_data']['training_days'])
    completed_count = len(completed_days)
    canceled_count = len(canceled_days)
    pending_count = len(pending_days)
    
    stats_message = f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∞:*\n"
    stats_message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count} –∏–∑ {total_count}\n"
    stats_message += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {canceled_count} –∏–∑ {total_count}\n"
    stats_message += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {pending_count} –∏–∑ {total_count}\n"
    
    if pending_count > 3:
        stats_message += f"\n–ü–æ–∫–∞–∑–∞–Ω—ã {len(pending_to_show)} –∏–∑ {pending_count} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."
    
    await update.message.reply_text(stats_message, parse_mode='Markdown')


async def generate_plan_command(update, context):
    """Handler for the /plan command."""
    user_id = update.message.from_user.id
    username = update.message.from_user.username
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_manager = DBManager()
    runner_profile = db_manager.get_runner_profile(user_id)
    
    if not runner_profile:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Å–æ–∑–¥–∞—Ç—å
        message = "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë§ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="create_profile")]
        ])
        await update.message.reply_text(message, reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    current_plan = db_manager.get_current_plan(user_id)
    
    if current_plan:
        # –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        message = f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: *{current_plan['plan_name']}*"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        training_manager = TrainingPlanManager(user_id)
        plan_data = training_manager.get_training_plan(current_plan['id'])
        
        if not plan_data or 'plan_data' not in plan_data or 'training_days' not in plan_data['plan_data']:
            message += "\n\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω."
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            total_trainings = len(plan_data['plan_data']['training_days'])
            completed = training_manager.count_completed_trainings(current_plan['id'])
            canceled = training_manager.count_canceled_trainings(current_plan['id'])
            remaining = total_trainings - (completed + canceled)
            
            message += f"\n\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            message += f"\n‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {canceled} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            message += f"\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data=f"view_plan_{current_plan['id']}")],
            [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")]
        ])
        
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –Ω–æ –ø–ª–∞–Ω–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
        openai_service = OpenAIService()
        training_plan = openai_service.generate_training_plan(runner_profile)
        
        if not training_plan:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        training_manager = TrainingPlanManager(user_id)
        plan_id = training_manager.save_training_plan(training_plan)
        
        if not plan_id:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω
        message = f"‚úÖ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n*{training_plan['plan_name']}*\n\n{training_plan['plan_description']}"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{plan_id}")],
            [InlineKeyboardButton("üèÉ –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"pending_trainings")]
        ])
        
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É —Å –±–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä–∞–º–∏
        await update.message.reply_text(
            "üîç –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ RunTracker Bot! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —á–∞—Ç—É —Å –¥—Ä—É–≥–∏–º–∏ –±–µ–≥—É–Ω–∞–º–∏, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã: @runtracker_beta"
        )
    
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @run_coach_support."
        )


async def update_profile_command(update, context):
    """Handler for the /update command - starts runner profile update dialog."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
    profile_handler = RunnerProfileConversation()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    return await profile_handler.start_update(update, context)


async def callback_query_handler(update, context):
    """Handler for inline button callbacks."""
    query = update.callback_query
    await query.answer()  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ callback
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    callback_data = query.data
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã callback_data
    if callback_data == "create_profile":
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_handler = RunnerProfileConversation()
        await profile_handler.start(update, context)
        return
    
    elif callback_data == "new_plan":
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
        user_id = query.from_user.id
        
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
            db_manager = DBManager()
            runner_profile = db_manager.get_runner_profile(user_id)
            
            if not runner_profile:
                await query.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞."
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
            openai_service = OpenAIService()
            training_plan = openai_service.generate_training_plan(runner_profile)
            
            if not training_plan:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            training_manager = TrainingPlanManager(user_id)
            plan_id = training_manager.save_training_plan(training_plan)
            
            if not plan_id:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω
            message = f"‚úÖ –ù–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n*{training_plan['plan_name']}*\n\n{training_plan['plan_description']}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{plan_id}")],
                [InlineKeyboardButton("üèÉ –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"pending_trainings")]
            ])
            
            await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @run_coach_support."
            )
    
    elif callback_data.startswith("view_plan_"):
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        plan_id = int(callback_data.split("_")[2])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
        training_manager = TrainingPlanManager(user_id)
        plan_data = training_manager.get_training_plan(plan_id)
        
        if not plan_data or 'plan_data' not in plan_data or 'training_days' not in plan_data['plan_data']:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω."
            )
            return
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        message = f"*{plan_data['plan_name']}*\n\n{plan_data['plan_description']}\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–µ
        await query.message.reply_text(message, parse_mode='Markdown')
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        for i, day in enumerate(plan_data['plan_data']['training_days'], 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            status = training_manager.get_training_status(plan_id, i)
            status_emoji = ""
            
            if status == 'completed':
                status_emoji = "‚úÖ "
            elif status == 'canceled':
                status_emoji = "‚ùå "
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            day_info = format_training_day(day, i)
            training_message = f"{status_emoji}{day_info}"
            
            # –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            if not status:
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_training_{plan_id}_{i}"),
                        InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ", callback_data=f"cancel_training_{plan_id}_{i}")
                    ]
                ])
                
                await query.message.reply_text(training_message, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await query.message.reply_text(training_message, parse_mode='Markdown')
    
    elif callback_data == "pending_trainings":
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await pending_trainings_command(update, context)
    
    elif callback_data.startswith("complete_training_"):
        # –û—Ç–º–µ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
        parts = callback_data.split("_")
        plan_id = int(parts[2])
        training_day = int(parts[3])
        user_id = query.from_user.id
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        training_manager = TrainingPlanManager(user_id)
        success = training_manager.mark_training_completed(plan_id, training_day)
        
        if success:
            await query.message.reply_text(
                f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ #{training_day} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            plan_data = training_manager.get_training_plan(plan_id)
            if plan_data and 'plan_data' in plan_data and 'training_days' in plan_data['plan_data']:
                if training_day <= len(plan_data['plan_data']['training_days']):
                    day = plan_data['plan_data']['training_days'][training_day - 1]
                    day_info = format_training_day(day, training_day)
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å
                    try:
                        await query.message.edit_text(
                            f"‚úÖ {day_info}",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø–ª–∞–Ω
            completed = training_manager.count_completed_trainings(plan_id)
            canceled = training_manager.count_canceled_trainings(plan_id)
            total = len(plan_data['plan_data']['training_days'])
            
            if completed + canceled == total:
                # –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
                message = f"üéâ *–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                message += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {canceled} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
                message += "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –ø–ª–∞–Ω–æ–º."
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                ])
                
                await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    elif callback_data.startswith("cancel_training_"):
        # –û—Ç–º–µ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π
        parts = callback_data.split("_")
        plan_id = int(parts[2])
        training_day = int(parts[3])
        user_id = query.from_user.id
        
        # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
        training_manager = TrainingPlanManager(user_id)
        success = training_manager.mark_training_canceled(plan_id, training_day)
        
        if success:
            await query.message.reply_text(
                f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ #{training_day} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è."
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            plan_data = training_manager.get_training_plan(plan_id)
            if plan_data and 'plan_data' in plan_data and 'training_days' in plan_data['plan_data']:
                if training_day <= len(plan_data['plan_data']['training_days']):
                    day = plan_data['plan_data']['training_days'][training_day - 1]
                    day_info = format_training_day(day, training_day)
                    
                    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å
                    try:
                        await query.message.edit_text(
                            f"‚ùå {day_info}",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –ø–ª–∞–Ω
            completed = training_manager.count_completed_trainings(plan_id)
            canceled = training_manager.count_canceled_trainings(plan_id)
            total = len(plan_data['plan_data']['training_days'])
            
            if completed + canceled == total:
                # –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –ø–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
                message = f"üéâ *–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                message += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
                message += f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {canceled} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n\n"
                message += "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –ø–ª–∞–Ω–æ–º."
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                ])
                
                await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    elif callback_data.startswith("continue_plan_"):
        # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–∏–º –ø–ª–∞–Ω–æ–º
        plan_id = int(callback_data.split("_")[2])
        user_id = query.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞
        db_manager = DBManager()
        runner_profile = db_manager.get_runner_profile(user_id)
        
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω
            training_manager = TrainingPlanManager(user_id)
            current_plan = training_manager.get_training_plan(plan_id)
            
            if not current_plan or 'plan_data' not in current_plan or 'training_days' not in current_plan['plan_data']:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω."
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI
            openai_service = OpenAIService()
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            runner_profile['current_plan'] = current_plan
            training_plan = openai_service.generate_training_plan(runner_profile, continue_plan=True)
            
            if not training_plan:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            new_plan_id = training_manager.save_training_plan(training_plan)
            
            if not new_plan_id:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω
            message = f"‚úÖ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω!\n\n*{training_plan['plan_name']}*\n\n{training_plan['plan_description']}"
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"view_plan_{new_plan_id}")],
                [InlineKeyboardButton("üèÉ –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"pending_trainings")]
            ])
            
            await query.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
        
        except Exception as e:
            logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @run_coach_support."
            )
    
    # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã callback_data –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å


async def handle_photo(update, context):
    """Handler for photo messages to analyze workout screenshots."""
    user_id = update.message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo_file = await update.message.photo[-1].get_file()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo_bytes = io.BytesIO()
    await photo_file.download(out=photo_bytes)
    photo_bytes.seek(0)
    
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é OpenAI
        image_analyzer = ImageAnalyzer()
        analysis_result = await image_analyzer.analyze_workout_image(photo_bytes.getvalue())
        
        if not analysis_result:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –ª–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        if 'workout_type' in analysis_result and analysis_result['workout_type'].lower() == 'running':
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            message = "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:*\n\n"
            
            if 'distance' in analysis_result:
                message += f"üèÉ –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {analysis_result['distance']}\n"
            if 'duration' in analysis_result:
                message += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {analysis_result['duration']}\n"
            if 'pace' in analysis_result:
                message += f"‚ö° –¢–µ–º–ø: {analysis_result['pace']}\n"
            if 'calories' in analysis_result:
                message += f"üî• –ö–∞–ª–æ—Ä–∏–∏: {analysis_result['calories']}\n"
            if 'date' in analysis_result:
                message += f"üìÖ –î–∞—Ç–∞: {analysis_result['date']}\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            db_manager = DBManager()
            current_plan = db_manager.get_current_plan(user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            if current_plan:
                message += "\n–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –≤ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ?"
                
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é", callback_data=f"mark_by_image_{current_plan['id']}")]
                ])
                
                await update.message.reply_text(message, reply_markup=keyboard, parse_mode='Markdown')
            else:
                await update.message.reply_text(message, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–µ–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
            workout_type = analysis_result.get('workout_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
            await update.message.reply_text(
                f"üëç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–∏–ø–∞: {workout_type}\n\n"
                f"üìù –í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –±–µ–≥–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. "
                f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!"
            )
    
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @run_coach_support."
        )


def setup_bot(application):
    """Configure and return the bot application."""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", send_main_menu))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plan", generate_plan_command))
    application.add_handler(CommandHandler("pending", pending_trainings_command))
    application.add_handler(CommandHandler("update", update_profile_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ inline
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–∞–Ω–∞–ª–∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞
    profile_handler = RunnerProfileConversation()
    application.add_handler(profile_handler.get_conversation_handler())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def text_message_handler(update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        text = update.message.text
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "hi", "hello"]:
            await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {update.message.from_user.first_name}! –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?")
        elif "–ø–æ–º–æ—â—å" in text.lower() or "help" in text.lower():
            await help_command(update, context)
        elif "–ø–ª–∞–Ω" in text.lower() or "plan" in text.lower():
            await generate_plan_command(update, context)
        elif "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫" in text.lower() or "workout" in text.lower():
            await pending_trainings_command(update, context)
        else:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é."
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    async def cancel_command(update, context):
        """Handler for the /cancel command - cancels current conversation."""
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=ReplyKeyboardRemove()
        )
        await send_main_menu(update, context)
        return END
    
    application.add_handler(CommandHandler("cancel", cancel_command))
    
    return application