from telegram.ext import ApplicationBuilder
from config import TELEGRAM_TOKEN, logging
from models import create_tables
from conversation import RunnerProfileConversation

async def help_command(update, context):
    """Handler for the /help command."""
    help_text = (
        "üèÉ‚Äç‚ôÇÔ∏è *–ü–æ–º–æ—â—å –ø–æ –ë–æ—Ç—É –ü—Ä–æ—Ñ–∏–ª—è –ë–µ–≥—É–Ω–∞* üèÉ‚Äç‚ôÄÔ∏è\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
        "–í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —è –∑–∞–¥–∞–º –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –±–µ–≥–æ–≤—ã—Ö —Ü–µ–ª—è—Ö, —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö "
        "–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /cancel."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

def setup_bot():
    """Configure and return the bot application."""
    if not TELEGRAM_TOKEN:
        logging.critical("Telegram bot token is missing! Set the TELEGRAM_TOKEN environment variable.")
        raise ValueError("Telegram bot token is required")
    
    # Create database tables
    create_tables()
    
    # Initialize the bot
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # Set up conversation handler
    conversation = RunnerProfileConversation()
    application.add_handler(conversation.get_conversation_handler())
    
    # Add standalone command handlers
    from telegram.ext import CommandHandler
    application.add_handler(CommandHandler("help", help_command))
    
    return application
