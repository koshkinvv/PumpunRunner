from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from config import TELEGRAM_TOKEN, logging
from models import create_tables
from conversation import RunnerProfileConversation
from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from openai_service import OpenAIService

async def help_command(update, context):
    """Handler for the /help command."""
    help_text = (
        "üèÉ‚Äç‚ôÇÔ∏è *–ü–æ–º–æ—â—å –ø–æ –ë–æ—Ç—É –ü—Ä–æ—Ñ–∏–ª—è –ë–µ–≥—É–Ω–∞* üèÉ‚Äç‚ôÄÔ∏è\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/plan - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
        "–í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —è –∑–∞–¥–∞–º –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –±–µ–≥–æ–≤—ã—Ö —Ü–µ–ª—è—Ö, —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö "
        "–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /cancel."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def generate_plan_command(update, context):
    """Handler for the /plan command."""
    try:
        # Get user ID
        telegram_id = update.effective_user.id
        db_user_id = DBManager.get_user_id(telegram_id)
        
        if not db_user_id:
            await update.message.reply_text(
                "‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return
        
        # Get runner profile
        profile = DBManager.get_runner_profile(db_user_id)
        
        if not profile:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return
        
        # Check if plan already exists
        existing_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        
        if existing_plan:
            # Plan already exists, ask if user wants to generate a new one
            from telegram import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", callback_data="view_plan")],
                [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="new_plan")]
            ])
            
            await update.message.reply_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω '{existing_plan['plan_name']}'. "
                f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
                reply_markup=keyboard
            )
            return
        
        # Otherwise generate a new plan
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # Generate training plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)
        
        # Save plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
        
        if not plan_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Send plan overview
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Send each training day
        for idx, day in enumerate(plan['training_days']):
            day_message = (
                f"*–î–µ–Ω—å {idx+1}: {day['day']}*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            await update.message.reply_text(day_message, parse_mode='Markdown')
    
    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def callback_query_handler(update, context):
    """Handler for inline button callbacks."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    db_user_id = DBManager.get_user_id(telegram_id)
    
    if query.data == 'view_plan':
        # Show existing plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        
        await query.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Send each training day
        for idx, day in enumerate(plan['plan_data']['training_days']):
            day_message = (
                f"*–î–µ–Ω—å {idx+1}: {day['day']}*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            await query.message.reply_text(day_message, parse_mode='Markdown')
            
    elif query.data == 'new_plan':
        # Generate new plan
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # Get runner profile
        profile = DBManager.get_runner_profile(db_user_id)
        
        # Generate new training plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)
        
        # Save plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
        
        if not plan_id:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Send plan overview
        await query.message.reply_text(
            f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Send each training day
        for idx, day in enumerate(plan['training_days']):
            day_message = (
                f"*–î–µ–Ω—å {idx+1}: {day['day']}*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            await query.message.reply_text(day_message, parse_mode='Markdown')

def setup_bot():
    """Configure and return the bot application."""
    if not TELEGRAM_TOKEN:
        logging.critical("Telegram bot token is missing! Set the TELEGRAM_TOKEN environment variable.")
        raise ValueError("Telegram bot token is required")
    
    # Create database tables
    create_tables()
    
    # Initialize the bot
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # Set up conversation handler
    conversation = RunnerProfileConversation()
    application.add_handler(conversation.get_conversation_handler())
    
    # Add standalone command handlers
    from telegram.ext import CommandHandler, CallbackQueryHandler
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plan", generate_plan_command))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    return application
