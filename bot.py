import os
import json
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ConversationHandler
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from config import TELEGRAM_TOKEN, logging
from models import create_tables
from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from openai_service import OpenAIService
from conversation import RunnerProfileConversation


def format_weekly_volume(volume, default_value="0"):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –±–µ–≥–∞, –∏–∑–±–µ–≥–∞—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è None.

    Args:
        volume: –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–º–∞
        default_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ None –∏–ª–∏ "None"

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ–±—ä–µ–º–æ–º –±–µ–≥–∞
    """
    if volume is None or volume == "None" or not volume:
        return f"{default_value} –∫–º/–Ω–µ–¥–µ–ª—é"

    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if isinstance(volume, str) and ("–∫–º/–Ω–µ–¥–µ–ª—é" in volume or "–∫–º" in volume):
        return volume

    # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    return f"{volume} –∫–º/–Ω–µ–¥–µ–ª—é"

async def help_command(update, context):
    """Handler for the /help command."""
    help_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–µ–≥—É–Ω–æ–≤. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n\n"
        "/plan - –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/pending - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan"
    )
    await update.message.reply_text(help_text)

async def pending_trainings_command(update, context):
    """Handler for the /pending command - shows only pending (not completed) trainings."""
    try:
        # Get user ID from database
        telegram_id = update.effective_user.id
        db_user_id = DBManager.get_user_id(telegram_id)

        if not db_user_id:
            # User not found, prompt to start a conversation
            await update.message.reply_text(
                "‚ö†Ô∏è –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π'."
            )
            return

        # Get latest training plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        if not plan:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return

        # Get completed and canceled trainings
        plan_id = plan['id']
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days

        # Send plan overview
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )

        # Send only not completed or canceled training days
        has_pending_trainings = False
        for idx, day in enumerate(plan['plan_data']['training_days']):
            training_day_num = idx + 1

            # Skip completed and canceled training days
            if training_day_num in processed_days:
                continue

            has_pending_trainings = True

            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )

            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])

            await update.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)

        # If all trainings are completed or canceled, show a congratulation message with continue button
        if not has_pending_trainings:
            # Calculate total completed distance
            total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)

            # Add total distance to user profile
            new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)

            # Create continue button
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
            ])

            formatted_volume = format_weekly_volume(new_volume, str(total_distance))

            await update.message.reply_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {formatted_volume}.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                reply_markup=keyboard
            )

    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def generate_plan_command(update, context):
    """Handler for the /plan command."""
    try:
        # Get user ID from database
        telegram_id = update.effective_user.id
        username = update.effective_user.username
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name

        # Try to add/update user and get the ID
        db_user_id = DBManager.add_user(telegram_id, username, first_name, last_name)

        if not db_user_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        # Check if user has a runner profile
        profile = DBManager.get_runner_profile(db_user_id)

        if not profile:
            # User doesn't have a profile yet, suggest to create one
            await update.message.reply_text(
                "‚ö†Ô∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –±–µ–≥—É–Ω–∞. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ /plan"
            )
            return

        # Check if user already has a training plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)

        if plan:
            # User already has a plan, ask if they want to view it or create a new one
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω", callback_data="view_plan")],
                [InlineKeyboardButton("üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="new_plan")]
            ])

            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=keyboard
            )
            return

        # Generate new training plan
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

        # Get OpenAI service and generate plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)

        # Save the plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)

        if not plan_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # Send plan overview
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )

        # Send each training day with action buttons
        for idx, day in enumerate(plan['training_days']):
            training_day_num = idx + 1
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )

            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])

            await update.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)

    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def callback_query_handler(update, context):
    """Handler for inline button callbacks."""
    query = update.callback_query
    await query.answer()

    telegram_id = update.effective_user.id
    db_user_id = DBManager.get_user_id(telegram_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if query.data.startswith('complete_'):
        # –§–æ—Ä–º–∞—Ç: complete_PLAN_ID_DAY_NUMBER
        try:
            _, plan_id, day_number = query.data.split('_')
            plan_id = int(plan_id)
            day_number = int(day_number)

            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            success = TrainingPlanManager.mark_training_completed(db_user_id, plan_id, day_number)

            if success:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                if not plan:
                    await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                day_idx = day_number - 1
                if day_idx < 0 or day_idx >= len(plan['plan_data']['training_days']):
                    await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                    return

                day = plan['plan_data']['training_days'][day_idx]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                day_message = (
                    f"‚úÖ *–î–µ–Ω—å {day_number}: {day['day']} ({day['date']})* - –í–´–ü–û–õ–ù–ï–ù–û\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )

                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    await query.message.edit_text(day_message, parse_mode='Markdown')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å {day_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
                processed_days = completed_days + canceled_days

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–ª–∞–Ω–µ
                total_days = len(plan['plan_data']['training_days'])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                has_pending_trainings = any(day_num not in processed_days for day_num in range(1, total_days + 1))

                # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not has_pending_trainings:
                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                    ])

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await query.message.reply_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                        f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_volume}.\n\n"
                        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                        reply_markup=keyboard
                    )
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")

        except Exception as e:
            logging.error(f"Error marking training as completed: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    elif query.data.startswith('cancel_'):
        # –§–æ—Ä–º–∞—Ç: cancel_PLAN_ID_DAY_NUMBER
        try:
            _, plan_id, day_number = query.data.split('_')
            plan_id = int(plan_id)
            day_number = int(day_number)

            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
            success = TrainingPlanManager.mark_training_canceled(db_user_id, plan_id, day_number)

            if success:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                if not plan:
                    await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                day_idx = day_number - 1
                if day_idx < 0 or day_idx >= len(plan['plan_data']['training_days']):
                    await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                    return

                day = plan['plan_data']['training_days'][day_idx]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ–± –æ—Ç–º–µ–Ω–µ
                day_message = (
                    f"‚ùå *–î–µ–Ω—å {day_number}: {day['day']} ({day['date']})* - –û–¢–ú–ï–ù–ï–ù–û\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )

                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    await query.message.edit_text(day_message, parse_mode='Markdown')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å {day_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è!"
                    )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
                canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
                processed_days = completed_days + canceled_days

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –ø–ª–∞–Ω–µ
                total_days = len(plan['plan_data']['training_days'])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ –ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã
                has_pending_trainings = any(day_num not in processed_days for day_num in range(1, total_days + 1))

                # –ï—Å–ª–∏ –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not has_pending_trainings:
                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)

                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                    ])

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await query.message.reply_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                        f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_volume}.\n\n"
                        f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                        reply_markup=keyboard
                    )
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é.")

        except Exception as e:
            logging.error(f"Error marking training as canceled: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

    elif query.data == 'view_plan':
        # Show existing plan
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            telegram_id = update.effective_user.id
            db_user_id = DBManager.get_user_id(telegram_id)

            if not db_user_id:
                await query.message.reply_text(
                    "‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. "
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            plan = TrainingPlanManager.get_latest_training_plan(db_user_id)

            if not plan:
                await query.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è."
                )
                return

            await query.message.reply_text(
                f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
                f"*{plan['plan_name']}*\n\n"
                f"{plan['plan_description']}",
                parse_mode='Markdown'
            )

            # Get completed and canceled trainings
            plan_id = plan['id']
            completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
            canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
            processed_days = completed_days + canceled_days

            # Send only not completed or canceled training days
            has_pending_trainings = False
            for idx, day in enumerate(plan['plan_data']['training_days']):
                training_day_num = idx + 1

                # Skip completed and canceled training days
                if training_day_num in processed_days:
                    continue

                has_pending_trainings = True

                day_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )

                # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
                ])

                await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)

            # If all trainings are completed or canceled, show a congratulation message with continue button
            if not has_pending_trainings:
                # Calculate total completed distance
                total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)

                # Add total distance to user profile
                new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)

                # Create continue button
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
                ])

                await query.message.reply_text(
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                    f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_volume}.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                    reply_markup=keyboard
                )

        except Exception as e:
            logging.error(f"Error viewing training plan: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")


    elif query.data.startswith('continue_plan_'):
        # Format: continue_plan_PLAN_ID
        try:
            # Extract plan ID
            _, plan_id = query.data.split('_', 2)[1:]
            plan_id = int(plan_id)

            await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

            # Get runner profile and the current plan
            profile = DBManager.get_runner_profile(db_user_id)
            current_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)

            if not profile or not current_plan:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                return

            # Calculate total completed distance
            total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)

            # Generate continuation of the training plan
            openai_service = OpenAIService()
            plan = openai_service.generate_training_plan_continuation(profile, total_distance, current_plan['plan_data'])

            # Save the new plan to database
            new_plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)

            if not new_plan_id:
                await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # Send plan overview
            await query.message.reply_text(
                f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
                f"*{plan['plan_name']}*\n\n"
                f"{plan['plan_description']}",
                parse_mode='Markdown'
            )

            # Send training days
            for idx, day in enumerate(plan['training_days']):
                training_day_num = idx + 1

                day_message = (
                    f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )

                # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{new_plan_id}_{training_day_num}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{new_plan_id}_{training_day_num}")]
                ])

                await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)

        except Exception as e:
            logging.error(f"Error generating training plan continuation: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif query.data == 'new_plan' or query.data == 'generate_plan':
        # Generate new plan
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

        # Get runner profile
        profile = DBManager.get_runner_profile(db_user_id)

        # Generate new training plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)

        # Save plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)

        if not plan_id:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # Send plan overview
        await query.message.reply_text(
            f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )

        # Get completed and canceled trainings
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days

        # Send only not completed or canceled training days
        has_pending_trainings = False
        for idx, day in enumerate(plan['training_days']):
            training_day_num = idx + 1

            # Skip completed and canceled training days
            if training_day_num in processed_days:
                continue

            has_pending_trainings = True

            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )

            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])

            await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)

        # If all trainings are completed or canceled, show a congratulation message with continue button
        if not has_pending_trainings:
            # Calculate total completed distance
            total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)

            # Add total distance to user profile
            new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)

            # Create continue button
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
            ])

            await query.message.reply_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_volume}.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                reply_markup=keyboard
            )

def setup_bot():
    """Configure and return the bot application."""
    if not TELEGRAM_TOKEN:
        logging.critical("Telegram bot token is missing! Set the TELEGRAM_TOKEN environment variable.")
        raise ValueError("Telegram bot token is required")

    # Create database tables
    create_tables()

    # Initialize the bot
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Set up conversation handler
    conversation = RunnerProfileConversation()
    application.add_handler(conversation.get_conversation_handler())

    # Add standalone command handlers
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plan", generate_plan_command))
    application.add_handler(CommandHandler("pending", pending_trainings_command))
    application.add_handler(CallbackQueryHandler(callback_query_handler))

    return application