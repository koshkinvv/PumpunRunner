# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ python-telegram-bot
try:
    from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
except ImportError:
    # –î–ª—è LSP - —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤
    class ApplicationBuilder:
        def __init__(self, token=None): 
            self.token = token
        def build(self): 
            return None
    
    class CommandHandler:
        def __init__(self, command, callback): 
            self.command = command
            self.callback = callback
    
    class CallbackQueryHandler:
        def __init__(self, callback): 
            self.callback = callback
    
    class InlineKeyboardMarkup:
        def __init__(self, inline_keyboard): 
            self.inline_keyboard = inline_keyboard
    
    class InlineKeyboardButton:
        def __init__(self, text, callback_data=None): 
            self.text = text
            self.callback_data = callback_data
from config import TELEGRAM_TOKEN, logging
from models import create_tables
from conversation import RunnerProfileConversation
from db_manager import DBManager
from training_plan_manager import TrainingPlanManager
from openai_service import OpenAIService

async def help_command(update, context):
    """Handler for the /help command."""
    help_text = (
        "üèÉ‚Äç‚ôÇÔ∏è *–ü–æ–º–æ—â—å –ø–æ –ë–æ—Ç—É –ü—Ä–æ—Ñ–∏–ª—è –ë–µ–≥—É–Ω–∞* üèÉ‚Äç‚ôÄÔ∏è\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞, –æ—Ç–≤–µ—Ç–∏–≤ –Ω–∞ —Å–µ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/plan - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/pending - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
        "–í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —è –∑–∞–¥–∞–º –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–∏—Ö –±–µ–≥–æ–≤—ã—Ö —Ü–µ–ª—è—Ö, —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö "
        "–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /cancel."
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def pending_trainings_command(update, context):
    """Handler for the /pending command - shows only pending (not completed) trainings."""
    try:
        # Get user ID
        telegram_id = update.effective_user.id
        db_user_id = DBManager.get_user_id(telegram_id)
        
        if not db_user_id:
            await update.message.reply_text(
                "‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return
        
        # Get latest training plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        
        if not plan:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /plan –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞."
            )
            return
        
        # Get completed and canceled trainings
        plan_id = plan['id']
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days
        
        # Get only pending trainings (not completed or canceled)
        pending_trainings = []
        for idx, day in enumerate(plan['plan_data']['training_days']):
            training_day_num = idx + 1
            if training_day_num not in processed_days:
                pending_trainings.append((training_day_num, day))
        
        if not pending_trainings:
            await update.message.reply_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!"
            )
            return
        
        # Send plan overview
        await update.message.reply_text(
            f"üìã *–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø–ª–∞–Ω–∞:*\n\n"
            f"*{plan['plan_name']}*",
            parse_mode='Markdown'
        )
        
        # Send each pending training day
        for training_day_num, day in pending_trainings:
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            
            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])
            
            await update.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
    
    except Exception as e:
        logging.error(f"Error showing pending trainings: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def generate_plan_command(update, context):
    """Handler for the /plan command."""
    try:
        # Get user ID
        telegram_id = update.effective_user.id
        db_user_id = DBManager.get_user_id(telegram_id)
        
        if not db_user_id:
            await update.message.reply_text(
                "‚ùå –í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return
        
        # Get runner profile
        profile = DBManager.get_runner_profile(db_user_id)
        
        if not profile:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –±–µ–≥—É–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return
        
        # Check if plan already exists
        existing_plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        
        if existing_plan:
            # Plan already exists, ask if user wants to generate a new one
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", callback_data="view_plan")],
                [InlineKeyboardButton("üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="new_plan")]
            ])
            
            await update.message.reply_text(
                f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω '{existing_plan['plan_name']}'. "
                f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
                reply_markup=keyboard
            )
            return
        
        # Otherwise generate a new plan
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # Generate training plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)
        
        # Save plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
        
        if not plan_id:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Send plan overview
        await update.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Get completed and canceled trainings
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days
        
        # Send only not completed training days
        has_pending_trainings = False
        for idx, day in enumerate(plan['training_days']):
            training_day_num = idx + 1
            
            # Skip completed and canceled training days
            if training_day_num in processed_days:
                continue
                
            has_pending_trainings = True
            
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            
            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])
            
            await update.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
        # If all trainings are completed or canceled, show a congratulation message with continue button
        if not has_pending_trainings:
            # Calculate total completed distance
            total_distance = TrainingPlanManager.calculate_total_completed_distance(db_user_id, plan_id)
            
            # Add total distance to user profile
            new_volume = DBManager.update_weekly_volume(db_user_id, total_distance)
            
            # Create continue button
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data=f"continue_plan_{plan_id}")]
            ])
            
            await update.message.reply_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                f"–í—ã –ø—Ä–æ–±–µ–∂–∞–ª–∏ –≤ –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ {total_distance:.1f} –∫–º, –∏ –≤–∞—à –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –±–µ–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_volume}.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞?",
                reply_markup=keyboard
            )
    
    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def callback_query_handler(update, context):
    """Handler for inline button callbacks."""
    query = update.callback_query
    await query.answer()
    
    telegram_id = update.effective_user.id
    db_user_id = DBManager.get_user_id(telegram_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if query.data.startswith('complete_'):
        # –§–æ—Ä–º–∞—Ç: complete_PLAN_ID_DAY_NUMBER
        try:
            _, plan_id, day_number = query.data.split('_')
            plan_id = int(plan_id)
            day_number = int(day_number)
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
            success = TrainingPlanManager.mark_training_completed(db_user_id, plan_id, day_number)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                if not plan:
                    await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                day_idx = day_number - 1
                if day_idx < 0 or day_idx >= len(plan['plan_data']['training_days']):
                    await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                    return
                
                day = plan['plan_data']['training_days'][day_idx]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
                day_message = (
                    f"‚úÖ *–î–µ–Ω—å {day_number}: {day['day']} ({day['date']})* - –í–´–ü–û–õ–ù–ï–ù–û\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    await query.message.edit_text(day_message, parse_mode='Markdown')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å {day_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!"
                    )
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")
                
        except Exception as e:
            logging.error(f"Error marking training as completed: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
            
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    elif query.data.startswith('cancel_'):
        # –§–æ—Ä–º–∞—Ç: cancel_PLAN_ID_DAY_NUMBER
        try:
            _, plan_id, day_number = query.data.split('_')
            plan_id = int(plan_id)
            day_number = int(day_number)
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
            success = TrainingPlanManager.mark_training_canceled(db_user_id, plan_id, day_number)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏
                plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
                if not plan:
                    await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                day_idx = day_number - 1
                if day_idx < 0 or day_idx >= len(plan['plan_data']['training_days']):
                    await query.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
                    return
                
                day = plan['plan_data']['training_days'][day_idx]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ–± –æ—Ç–º–µ–Ω–µ
                day_message = (
                    f"‚ùå *–î–µ–Ω—å {day_number}: {day['day']} ({day['date']})* - –û–¢–ú–ï–ù–ï–ù–û\n"
                    f"–¢–∏–ø: {day['training_type']}\n"
                    f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                    f"–¢–µ–º–ø: {day['pace']}\n\n"
                    f"{day['description']}"
                )
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                    await query.message.edit_text(day_message, parse_mode='Markdown')
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        f"‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–µ–Ω—å {day_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è!"
                    )
            else:
                await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é.")
                
        except Exception as e:
            logging.error(f"Error marking training as canceled: {e}")
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    elif query.data == 'view_plan':
        # Show existing plan
        plan = TrainingPlanManager.get_latest_training_plan(db_user_id)
        
        await query.message.reply_text(
            f"‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Get completed and canceled trainings
        plan_id = plan['id']
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days
        
        # Send only not completed or canceled training days
        has_pending_trainings = False
        for idx, day in enumerate(plan['plan_data']['training_days']):
            training_day_num = idx + 1
            
            # Skip completed and canceled training days
            if training_day_num in processed_days:
                continue
                
            has_pending_trainings = True
            
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            
            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])
            
            await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
        # If all trainings are completed or canceled, show a congratulation message
        if not has_pending_trainings:
            await query.message.reply_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /plan –∏ –≤—ã–±—Ä–∞–≤ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π'."
            )
            
    elif query.data == 'new_plan' or query.data == 'generate_plan':
        # Generate new plan
        await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # Get runner profile
        profile = DBManager.get_runner_profile(db_user_id)
        
        # Generate new training plan
        openai_service = OpenAIService()
        plan = openai_service.generate_training_plan(profile)
        
        # Save plan to database
        plan_id = TrainingPlanManager.save_training_plan(db_user_id, plan)
        
        if not plan_id:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Send plan overview
        await query.message.reply_text(
            f"‚úÖ –í–∞—à –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≥–æ—Ç–æ–≤!\n\n"
            f"*{plan['plan_name']}*\n\n"
            f"{plan['plan_description']}",
            parse_mode='Markdown'
        )
        
        # Get completed and canceled trainings
        completed_days = TrainingPlanManager.get_completed_trainings(db_user_id, plan_id)
        canceled_days = TrainingPlanManager.get_canceled_trainings(db_user_id, plan_id)
        processed_days = completed_days + canceled_days
            
        # Send only not completed or canceled training days
        has_pending_trainings = False
        for idx, day in enumerate(plan['training_days']):
            training_day_num = idx + 1
            
            # Skip completed and canceled training days
            if training_day_num in processed_days:
                continue
                
            has_pending_trainings = True
            
            day_message = (
                f"*–î–µ–Ω—å {training_day_num}: {day['day']} ({day['date']})*\n"
                f"–¢–∏–ø: {day['training_type']}\n"
                f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {day['distance']}\n"
                f"–¢–µ–º–ø: {day['pace']}\n\n"
                f"{day['description']}"
            )
            
            # Create "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" and "–û—Ç–º–µ–Ω–∏—Ç—å" buttons for each training day
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ", callback_data=f"complete_{plan_id}_{training_day_num}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{plan_id}_{training_day_num}")]
            ])
            
            await query.message.reply_text(day_message, parse_mode='Markdown', reply_markup=keyboard)
            
        # If all trainings are completed or canceled, show a congratulation message
        if not has_pending_trainings:
            await query.message.reply_text(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º –ø–ª–∞–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã!\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /plan –∏ –≤—ã–±—Ä–∞–≤ '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π'."
            )

def setup_bot():
    """Configure and return the bot application."""
    if not TELEGRAM_TOKEN:
        logging.critical("Telegram bot token is missing! Set the TELEGRAM_TOKEN environment variable.")
        raise ValueError("Telegram bot token is required")
    
    # Create database tables
    create_tables()
    
    # Initialize the bot
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # Set up conversation handler
    conversation = RunnerProfileConversation()
    application.add_handler(conversation.get_conversation_handler())
    
    # Add standalone command handlers
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("plan", generate_plan_command))
    application.add_handler(CommandHandler("pending", pending_trainings_command))
    application.add_handler(CallbackQueryHandler(callback_query_handler))
    
    return application