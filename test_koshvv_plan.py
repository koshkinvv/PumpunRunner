"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP-–∞–¥–∞–ø—Ç–µ—Ä–∞
–Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è koshvv.
"""

import json
import logging
import os
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è koshvv
KOSHVV_PROFILE = {
    "id": 1,
    "user_id": 987654321,
    "age": 35,
    "gender": "–ú—É–∂—Å–∫–æ–π",
    "weight": 82,
    "height": 185,
    "experience": None,  # –ü–æ—Å–∫–æ–ª—å–∫—É fitness_level —É–¥–∞–ª–µ–Ω, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º None
    "weekly_volume": 17.5,
    "goal_distance": 42.2,
    "goal_distance_text": "–ú–∞—Ä–∞—Ñ–æ–Ω",
    "competition_date": None,  # –ë–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
    "preferred_days": ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"],
    "target_time": "4:30:00",
    "comfortable_pace": "6:30",
    "created_at": "2025-05-09"
}

def format_training_plan(plan):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
    
    Args:
        plan: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞–Ω–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    output = []
    output.append("="*60)
    output.append(f"üèÉ –ü–õ–ê–ù –¢–†–ï–ù–ò–†–û–í–û–ö: {plan.get('plan_name', '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω')}")
    output.append("="*60)
    output.append("")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    output.append(plan.get('plan_description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'))
    output.append("")
    output.append(f"üìä –û–±—â–∏–π –æ–±—ä–µ–º: {plan.get('weekly_volume', '?')} –∫–º")
    output.append(f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏: {plan.get('intensity_distribution', '?')}")
    output.append("")
    
    # –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    output.append("üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –¢–†–ï–ù–ò–†–û–í–û–ö:")
    output.append("-"*60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏ –∏–∑ –ø–ª–∞–Ω–∞
    training_days = plan.get('plan_data', {}).get('training_days', [])
    
    for day_data in training_days:
        day_name = day_data.get('day', '?')
        date = day_data.get('date', '')
        training_type = day_data.get('training_type', '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
        distance = day_data.get('distance', '?')
        pace = day_data.get('pace', '?')
        description = day_data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        
        output.append(f"–î–ï–ù–¨ {day_name} - {date}")
        output.append(f"üèÉ {training_type} - {distance}")
        output.append(f"‚è±Ô∏è –¢–µ–º–ø: {pace}")
        output.append(f"üìù {description}")
        output.append("-"*60)
    
    return "\n".join(output)

def generate_plan_for_koshvv():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è koshvv,
    –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—ã–π MCP-–∞–¥–∞–ø—Ç–µ—Ä.
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AgentAdapter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ koshvv...")
        from agent.adapter import AgentAdapter
        agent_adapter = AgentAdapter()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —á–µ—Ä–µ–∑ –∞–¥–∞–ø—Ç–µ—Ä
        logging.info(f"–í—ã–∑–æ–≤ agent_adapter.generate_training_plan –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è koshvv")
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = datetime.now()
        plan = agent_adapter.generate_training_plan(KOSHVV_PROFILE)
        execution_time = (datetime.now() - start_time).total_seconds()
        
        logging.info(f"–ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ MCP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        logging.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞: {plan.get('plan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        filename = f"koshvv_mcp_plan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(plan, f, indent=2, ensure_ascii=False)
            
        logging.info(f"–ü–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–∞–Ω
        return format_training_plan(plan), filename
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}", exc_info=True)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}", None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."""
    print("=" * 60)
    print("–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è koshvv")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        openai_key = input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenAI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ")
        os.environ["OPENAI_API_KEY"] = openai_key
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
    plan_text, filename = generate_plan_for_koshvv()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if filename:
        print(f"\n‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
        print("\n–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–ª–∞–Ω–∞:")
        print(plan_text)
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    main()